// File: backend/__init__.py

// File: backend/admin.py

// File: backend/api/views.py

// File: backend/forms.py

// File: backend/models.py
from django.db import models
from users.models import ApplicantProfile, OrganizationProfile
from django.conf import settings
from django.utils import timezone

class JobPosting(models.Model):
    org = models.ForeignKey(OrganizationProfile, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    job_type = models.CharField(max_length=20, choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')])
    salary = models.DecimalField(max_digits=10, decimal_places=2)
    location = models.CharField(max_length=100)
    requirements = models.TextField()
    deadline = models.DateField()
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.title} at {self.org.company_name}"


class JobApplication(models.Model):
    applicant = models.ForeignKey('users.ApplicantProfile', on_delete=models.CASCADE)
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE)
    status = models.CharField(max_length=50, choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending')
    message_to_org = models.TextField(blank=True)
    feedback = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    application_id = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return f"Application {self.application_id} by {self.applicant.user.id_number}"


class Message(models.Model):
    sender = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='sent_messages')
    receiver = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='received_messages')
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE, null=True, blank=True)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Message from {self.sender.id_number} to {self.receiver.id_number}"


class Feedback(models.Model):
    applicant = models.ForeignKey(ApplicantProfile, on_delete=models.CASCADE)
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE)
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Feedback for {self.job.title} by {self.applicant.user.id_number}"

// File: backend/urls.py

// File: backend/utils.py

// File: backend/views.py

// File: core/__init__.py

// File: core/asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_asgi_application()

// File: core/settings.py
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# ENV Mode (optional feature toggle)
DEMO_MODE = os.getenv('DEMO_MODE') == 'True'

SECRET_KEY = os.getenv('SECRET_KEY', 'a-strong-dev-secret-key')
DEBUG = os.getenv('DEBUG', 'True') == 'True'
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'crispy_forms',
    'crispy_bootstrap5',

    'users',
    'backend',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'eventwork_db'),
        'USER': os.getenv('POSTGRES_USER', 'eventwork_user'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'eventwork_pass'),
        'HOST': os.getenv('POSTGRES_HOST', 'db'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

AUTH_USER_MODEL = 'users.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: core/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('users/', include('users.urls')),
    path('jobs/', include('backend.urls')),
    path('backend/', include('backend.urls')),
]

// File: core/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_wsgi_application()

// File: manage.py
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

// File: static/css/dashboard.css

// File: static/css/login.css
:root {
    --primary-color: #005577;
    --accent-color: #0088aa;
    --bg-color: #f5f7fa;
    --text-color: #222;
    --card-bg: white;
    --border-color: #ddd;
  }
  
  body {
    background-color: var(--bg-color);
    color: var(--text-color);
    font-family: 'Segoe UI', sans-serif;
    margin: 0;
    padding: 0;
    height: 100vh;
  }
  
  .login-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: center;
    height: 100%;
    align-items: center;
  }
  
  .login-box {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    padding: 2rem;
    border-radius: 10px;
    width: 100%;
    max-width: 420px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
  }
  
  .btn-login {
    background-color: var(--primary-color);
    color: #fff;
  }
  
  .btn-login:hover {
    background-color: var(--accent-color);
  }
  
  .login-footer {
    margin-top: auto;
    font-size: 0.85rem;
    color: #666;
  }
  
// File: static/css/main.css

// File: templates/base.html
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}EventWork Connect{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar-brand {
            font-weight: bold;
        }
        footer {
            margin-top: 3rem;
            padding: 1rem 0;
            background-color: #f1f1f1;
            text-align: center;
        }
    </style>
    {% block extra_head %}{% endblock %}
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom">
    <div class="container">
        <a class="navbar-brand" href="/">EventWork Connect</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item"><a class="nav-link" href="/users/login/">Login</a></li>
                <li class="nav-item"><a class="nav-link" href="/users/register/">Register</a></li>
            </ul>
        </div>
    </div>
</nav>
``
<div class="container mt-4">
    {% block content %}{% endblock %}
</div>

<footer>
    <div class="container">
        <p class="mb-0">&copy; 2025 EventWork Connect. All rights reserved.</p>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
{% block extra_js %}{% endblock %}
</body>
</html>

// File: templates/dashboard.html

// File: templates/login.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>EventWork Connect - Login</title>
  <link rel="stylesheet" href="{% static 'css/login.css' %}" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="login-wrapper">
    <div class="login-box">
      <div class="text-center mb-4">
        <img src="{% static 'img/logo.png' %}" alt="EventWork Connect Logo" width="100" />
        <h2 class="mt-2">EventWork Connect</h2>
      </div>
      <form method="POST" action="{% url 'login' %}">
        {% csrf_token %}
        <div class="mb-3">
          <label for="id_number" class="form-label">Passport ID</label>
          <input type="text" id="id_number" name="id_number" class="form-control" required placeholder="Enter your ID">
        </div>
        <div class="mb-3">
          <label for="password" class="form-label">Password</label>
          <input type="password" id="password" name="password" class="form-control" required placeholder="Enter password">
        </div>
        <button type="submit" class="btn btn-login w-100">Login</button>
      </form>
      <div class="d-flex justify-content-between mt-3">
        <a href="{% url 'register' %}" class="btn btn-outline-light">Sign Up</a>
        <button class="btn btn-outline-light" data-bs-toggle="modal" data-bs-target="#forgotModal">Forgot Password?</button>
      </div>
    </div>
    <footer class="login-footer text-center mt-4">
      <p>&copy; 2025 EventWork Connect. All Rights Reserved.</p>
    </footer>
  </div>

  <!-- Forgot Password Modal -->
  <div class="modal fade" id="forgotModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <form id="forgotForm">
          <div class="modal-header">
            <h5 class="modal-title">Reset Password</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <label class="form-label">Enter your ID Number</label>
            <input type="text" id="forgotId" class="form-control" required />
            <div id="securityQuestions" class="mt-3 d-none">
              <!-- Questions will load here -->
            </div>
            <div class="mt-3 d-none" id="newPwFields">
              <input type="password" id="newPw" class="form-control mb-2" placeholder="New Password">
              <input type="password" id="confirmPw" class="form-control" placeholder="Confirm Password">
            </div>
            <p class="text-danger small mt-2" id="forgotError"></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="verifyBtn">Verify</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="{% static 'js/login.js' %}"></script>
</body>
</html>

// File: users/__init__.py

// File: users/admin.py

// File: users/api/views.py

// File: users/forms.py
from django import forms

class LoginForm(forms.Form):
    id_number = forms.CharField(label="Passport ID", max_length=100)
    password = forms.CharField(widget=forms.PasswordInput)

// File: users/managers.py
from django.contrib.auth.base_user import BaseUserManager

class UserManager(BaseUserManager):
    use_in_migrations = True

    def create_user(self, id_number, full_name, password=None, **extra_fields):
        if not id_number:
            raise ValueError("The ID number must be set")
        extra_fields.setdefault('is_active', True)
        user = self.model(id_number=id_number, full_name=full_name, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, id_number, full_name, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(id_number, full_name, password, **extra_fields)

// File: users/models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.utils import timezone
from .managers import UserManager

class User(AbstractBaseUser, PermissionsMixin):
    id_number = models.CharField(max_length=50, unique=True)
    full_name = models.CharField(max_length=150)
    phone_number = models.CharField(max_length=20, blank=True)
    age = models.PositiveIntegerField(null=True, blank=True)
    user_type = models.CharField(max_length=20, choices=[('job_seeker', 'Job Seeker'), ('job_poster', 'Job Poster')])
    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)

    USERNAME_FIELD = 'id_number'
    REQUIRED_FIELDS = ['full_name']

    objects = UserManager()

    def __str__(self):
        return self.id_number


class SecurityQuestion(models.Model):
    question_text = models.CharField(max_length=255)
    option1 = models.CharField(max_length=255)
    option2 = models.CharField(max_length=255)
    option3 = models.CharField(max_length=255)

    def __str__(self):
        return self.question_text


class UserSecurityAnswer(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='security_answers')
    question = models.ForeignKey(SecurityQuestion, on_delete=models.CASCADE)
    question_text = models.CharField(max_length=255)
    answer = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.user.id_number} - {self.question_text}"


class ApplicantProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    education = models.TextField()
    cv = models.FileField(upload_to='cvs/')
    availability = models.CharField(max_length=20, choices=[('part-time', 'Part-time'), ('volunteer', 'Volunteer')])
    preferred_location = models.CharField(max_length=100)
    job_type_interest = models.CharField(max_length=20, choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')])
    skills = models.TextField(blank=True)
    location_of_interest = models.CharField(max_length=100, blank=True)
    last_cv_update = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"ApplicantProfile: {self.user.full_name}"


class OrganizationProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    license_number = models.CharField(max_length=100)
    company_name = models.CharField(max_length=255)
    establishment_date = models.DateField()
    location = models.CharField(max_length=100)
    achievements = models.TextField(blank=True)
    sector = models.CharField(max_length=50, choices=[('IT', 'IT'), ('NGO', 'NGO'), ('Aviation', 'Aviation'), ('Business', 'Business')])
    company_type = models.CharField(max_length=20, choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')])

    def __str__(self):
        return f"OrganizationProfile: {self.company_name}"

// File: users/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('login/', views.login_view, name='login'),
    # Add more routes as needed
]

// File: users/utils.py

// File: users/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from django.contrib import messages
from .forms import LoginForm
from .models import User

def login_view(request):
    form = LoginForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            id_number = form.cleaned_data.get('id_number')
            password = form.cleaned_data.get('password')

            try:
                user = User.objects.get(id_number=id_number)
                user_auth = authenticate(request, username=user.username, password=password)
                if user_auth is not None:
                    login(request, user_auth)
                    return redirect('dashboard') 
                else:
                    messages.error(request, 'Invalid credentials. Please try again.')
            except User.DoesNotExist:
                messages.error(request, 'No user with that Passport ID was found.')

    return render(request, 'login.html', {'form': form})

