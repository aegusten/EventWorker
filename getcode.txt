// File: backend/__init__.py

// File: backend/admin.py

// File: backend/api/views.py

// File: backend/forms.py

// File: backend/migrations/0001_initial.py
# Generated by Django 5.2 on 2025-04-10 12:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0003_user_address_user_country'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('job_type', models.CharField(choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')], max_length=20)),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=100)),
                ('requirements', models.TextField()),
                ('deadline', models.DateField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.organizationprofile')),
            ],
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=50)),
                ('message_to_org', models.TextField(blank=True)),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application_id', models.CharField(max_length=50, unique=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.applicantprofile')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.jobposting')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.applicantprofile')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.jobposting')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.jobposting')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

// File: backend/migrations/0002_alter_feedback_applicant_and_more.py
# Generated by Django 5.2 on 2025-04-12 03:43

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0001_initial'),
        ('users', '0004_remove_applicantprofile_user_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='feedback',
            name='applicant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.applicant'),
        ),
        migrations.AlterField(
            model_name='jobapplication',
            name='applicant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.applicant'),
        ),
        migrations.AlterField(
            model_name='jobposting',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.organization'),
        ),
        migrations.AlterField(
            model_name='message',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to='users.organization'),
        ),
        migrations.AlterField(
            model_name='message',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='users.applicant'),
        ),
    ]

// File: backend/migrations/__init__.py

// File: backend/models.py
from django.db import models
from django.utils import timezone
from django.conf import settings

from users.models import Applicant, Organization


class JobPosting(models.Model):
    org = models.ForeignKey(Organization, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    job_type = models.CharField(max_length=20, choices=[
        ('full-time', 'Full-time'),
        ('part-time', 'Part-time'),
        ('volunteer', 'Volunteer')
    ])
    salary = models.DecimalField(max_digits=10, decimal_places=2)
    location = models.CharField(max_length=100)
    requirements = models.TextField()
    deadline = models.DateField()
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.title} at {self.org.company_name}"


class JobApplication(models.Model):
    applicant = models.ForeignKey(Applicant, on_delete=models.CASCADE)
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE)
    status = models.CharField(max_length=50, choices=[
        ('pending', 'Pending'),
        ('accepted', 'Accepted'),
        ('rejected', 'Rejected')
    ], default='pending')
    message_to_org = models.TextField(blank=True)
    feedback = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    application_id = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return f"Application {self.application_id} by {self.applicant.id_number}"


class Message(models.Model):
    sender = models.ForeignKey(Applicant, on_delete=models.CASCADE, related_name='sent_messages')
    receiver = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='received_messages')
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE, null=True, blank=True)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Message from {self.sender.id_number} to {self.receiver.id_number}"


class Feedback(models.Model):
    applicant = models.ForeignKey(Applicant, on_delete=models.CASCADE)
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE)
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Feedback for {self.job.title} by {self.applicant.id_number}"

// File: backend/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls)
]

// File: backend/utils.py

// File: backend/views.py

// File: core/__init__.py

// File: core/asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_asgi_application()

// File: core/settings.py
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# ENV Mode (optional feature toggle)
DEMO_MODE = os.getenv('DEMO_MODE') == 'True'

SECRET_KEY = os.getenv('SECRET_KEY', 'a-strong-dev-secret-key')
DEBUG = os.getenv('DEBUG', 'True') == 'True'
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'users',
    'backend',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'eventwork_db'),
        'USER': os.getenv('POSTGRES_USER', 'eventwork_user'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'eventwork_pass'),
        'HOST': os.getenv('POSTGRES_HOST', 'db'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

# AUTH_USER_MODEL = 'users.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: core/urls.py
from django.urls import path, include
from django.conf.urls.static import static
from users.views import home_redirect_view

from django.contrib import admin
from django.conf import settings


urlpatterns = [
    path('', home_redirect_view),
    path('admin/', admin.site.urls),
    path('account/', include('users.urls')),
    path('jobs/', include('backend.urls')),
    path('backend/', include('backend.urls')),

]

urlpatterns += static(
    settings.STATIC_URL, document_root=settings.STATIC_ROOT
)
// File: core/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_wsgi_application()

// File: manage.py
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

// File: static/css/dashboard.css

// File: static/css/login.css
:root {
  --bg-main: #d0d6d6;
  --bg-secondary: #86b9b0;
  --btn-main: #4c7273;
  --btn-hover: #365c5c;
  --text-main: #041421;
  --text-subtle: #042630;
  --white: #ffffff;
}

body {
  background-color: var(--bg-main);
  color: var(--text-main);
  font-family: 'Segoe UI', sans-serif;
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-image: radial-gradient(ellipse at center, rgba(76, 114, 115, 0.15) 0%, transparent 70%);
  background-repeat: no-repeat;
  background-position: center;
}

.login-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex-grow: 1;
}

.login-box {
  background: var(--bg-secondary);
  padding: 3.5rem;
  border-radius: 16px;
  max-width: 460px;
  width: 100%;
  box-shadow: 0 4px 30px rgba(76, 114, 115, 0.3);
  border: 2px solid var(--btn-main);
  text-align: center;
}

.login-box h2 {
  color: var(--text-main);
  font-weight: 700;
  margin-bottom: 1.5rem;
  font-size: 1.6rem;
}

.form-label {
  color: var(--text-subtle);
  font-weight: 600;
  text-align: left;
  display: block;
  margin-top: 0.75rem;
  margin-bottom: 0.25rem;
  font-size: 0.95rem;
}

input.form-control {
  background-color: var(--white);
  border: 1px solid var(--btn-main);
  color: var(--text-main);
  margin-bottom: 1rem;
  padding: 0.5rem 0.75rem;
  font-size: 1rem;
  font-weight: 500;
  border-radius: 8px;
}

.btn,
.btn-login,
.btn-outline-light,
.btn-register {
  font-weight: 700;
  font-size: 0.95rem;
  padding: 0.5rem 1rem;
  border-radius: 10px;
  transition: all 0.2s ease;
  width: 100%;
}

.btn-login,
.btn-register,
#signupSubmitBtn {
  background-color: var(--btn-main);
  color: var(--white);
  border: 1px solid var(--btn-main);
}

.btn-login:hover,
.btn-register:hover,
#signupSubmitBtn:hover {
  background-color: var(--btn-hover);
  border-color: var(--btn-hover);
}

.btn-outline-light {
  background-color: var(--btn-main);
  color: var(--white);
  border: 1px solid var(--btn-main);
}

.btn-outline-light:hover {
  background-color: var(--btn-hover);
  border-color: var(--btn-hover);
  color: var(--white);
}

footer.login-footer {
  font-size: 0.85rem;
  color: var(--text-subtle);
  padding: 1rem 0;
  text-align: center;
  font-weight: 500;
}

.type-toggle {
  padding: 6px;
  border-radius: 10px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: 0.3s ease-in-out;
}

.type-toggle.active-type {
  border-color: var(--btn-main);
  background-color: var(--btn-hover);
}

.type-toggle.disabled {
  pointer-events: none;
  opacity: 0.5;
}

// File: static/css/main.css

// File: templates/base.html
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}EventWork Connect{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar-brand {
            font-weight: bold;
        }
        footer {
            margin-top: 3rem;
            padding: 1rem 0;
            background-color: #f1f1f1;
            text-align: center;
        }
    </style>
    {% block extra_head %}{% endblock %}
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom">
    <div class="container">
        <a class="navbar-brand" href="/">EventWork Connect</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item"><a class="nav-link" href="/users/login/">Login</a></li>
                <li class="nav-item"><a class="nav-link" href="/users/register/">Register</a></li>
            </ul>
        </div>
    </div>
</nav>

<div class="container mt-4">
    {% block content %}{% endblock %}
</div>

<footer>
    <div class="container">
        <p class="mb-0">&copy; 2025 EventWork Connect. All rights reserved.</p>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
{% block extra_js %}{% endblock %}
</body>
</html>

// File: templates/dashboard.html
{% extends 'base.html' %}
{% block content %}
<div class="container text-center mt-5">
  <h1>Welcome to Your Dashboard!</h1>
  <p class="lead">You're successfully logged in 🎉</p>
  <a href="{% url 'logout' %}" class="btn btn-danger mt-4">Logout</a>
</div>
{% endblock %}

// File: templates/login.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>EventWork Connect - Login</title>
  <link rel="stylesheet" href="{% static 'css/login.css' %}">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="login-wrapper">
    <div class="login-box">
      <div class="text-center mb-4">
        <img src="{% static 'img/logo.png' %}" alt="EventWork Connect Logo" width="90" />
        <h2 class="mt-2">Welcome to EventWork</h2>
      </div>

      <form method="POST" id="loginForm" action="{% url 'login' %}">
        {% csrf_token %}
        <label for="id_number" class="form-label">Passport ID</label>
        <input type="text" id="id_number" name="id_number" class="form-control" required placeholder="Enter your ID">

        <label for="password" class="form-label">Password</label>
        <input type="password" id="password" name="password" class="form-control" required placeholder="Enter password">

        <button type="submit" class="n btn-outline-light mt-3 w-100">Login</button>
      </form>

      <button type="button" class="n btn-outline-light mt-3 w-100" data-bs-toggle="modal" data-bs-target="#signupModal">
        Sign Up
      </button>

      <button type="button" class="n btn-outline-light mt-3 w-100" id="showForgotBtn" data-bs-toggle="modal" data-bs-target="#forgotModal">
        Forgot Password?
      </button>

      <div class="text-danger mt-2 fw-semibold" id="loginError"></div>
    </div>

    <footer class="login-footer">
      <p>&copy; 2025 EventWork Connect</p>
    </footer>
  </div>

  <!-- Forgot Password Modal -->
  <div class="modal fade" id="forgotModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <form id="forgotForm">
          <div class="modal-header">
            <h5 class="modal-title">Reset Password</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <label for="forgotId" class="form-label">Enter your Passport ID</label>
            <input type="text" id="forgotId" class="form-control" required />
            <div id="securityQuestions" class="mt-3 d-none"></div>
            <div id="newPwFields" class="mt-3 d-none">
              <input type="password" id="newPw" class="form-control mb-2" placeholder="New Password" />
              <input type="password" id="confirmPw" class="form-control" placeholder="Confirm Password" />
            </div>
            <p class="text-danger small mt-2" id="forgotError"></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-light" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-login" id="verifyBtn">Verify</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Sign Up Modal -->
  <div class="modal fade" id="signupModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <form id="signupForm" method="POST" enctype="multipart/form-data" action="{% url 'register' %}">
          {% csrf_token %}
          <div class="modal-body">
            <input type="hidden" name="user_type" id="user_type" value="applicant">

            <!-- User type toggle -->
            <div class="d-flex justify-content-center gap-5 mb-4">
              <div id="applicantIcon" class="type-toggle active-type" role="button">
                <img src="{% static 'img/applicant-icon.png' %}" width="48" alt="Applicant">
                <div class="fw-semibold mt-1 text-center">Applicant</div>
              </div>
              <div id="organizationIcon" class="type-toggle" role="button">
                <img src="{% static 'img/organization-icon.png' %}" width="48" alt="Organization">
                <div class="fw-semibold mt-1 text-center">Organization</div>
              </div>
            </div>

            <!-- Step 1 -->
            <div id="signupStep1" class="px-3 py-2">
              <div class="row g-4">
                <div class="col-md-6">
                  <label class="form-label fw-bold">Passport ID</label>
                  <input type="text" class="form-control" name="id_number" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Full Name</label>
                  <input type="text" class="form-control" name="full_name" required>
                </div>

                <div class="col-md-6">
                  <label class="form-label fw-bold">Phone</label>
                  <input type="tel" class="form-control" name="phone_number" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Age</label>
                  <input type="number" class="form-control" name="age" min="1" required>
                </div>

                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Country</label>
                  <input type="text" class="form-control" name="country">
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Address</label>
                  <input type="text" class="form-control" name="address">
                </div>

                <div class="col-md-6">
                  <label class="form-label fw-bold">Password</label>
                  <input type="password" class="form-control" name="password1" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Confirm Password</label>
                  <input type="password" class="form-control" name="password2" required>
                </div>
              </div>

              <div class="d-grid mt-4">
                <button type="button" class="n btn-outline-light mt-3 w-100" id="signupNextBtn">Next</button>
              </div>
            </div>

            <!-- Step 2 -->
            <div id="signupStep2" class="px-3 py-2 d-none">
              <div class="row g-4">      

                <!-- Applicant Specific -->
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Education</label>
                  <input type="text" class="form-control" name="education" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">CV</label>
                  <input type="file" class="form-control" name="cv" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Availability</label>
                  <select class="form-control" name="availability" required>
                    <option value="part-time">Part-time</option>
                    <option value="volunteer">Volunteer</option>
                    <option value="full-time">Full-time</option>
                  </select>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Preferred Location</label>
                  <input type="text" class="form-control" name="preferred_location" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Job Type Interested</label>
                  <select class="form-control" name="job_type_interest" required>
                    <option value="full-time">Full-time</option>
                    <option value="part-time">Part-time</option>
                    <option value="volunteer">Volunteer</option>
                  </select>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Skills</label>
                  <input type="text" class="form-control" name="skills" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Location of Interest</label>
                  <input type="text" class="form-control" name="location_of_interest" required>
                </div>

                <!-- Organization Specific -->
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">License Number</label>
                  <input type="text" class="form-control" name="license_number" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Company Name</label>
                  <input type="text" class="form-control" name="company_name" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Establishment Date</label>
                  <input type="date" class="form-control" name="establishment_date" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Organization Location</label>
                  <input type="text" class="form-control" name="org_location" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Achievements</label>
                  <input type="text" class="form-control" name="achievements" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Sector</label>
                  <select class="form-control" name="sector" required>
                    <option value="IT">IT</option>
                    <option value="NGO">NGO</option>
                    <option value="Aviation">Aviation</option>
                    <option value="Business">Business</option>
                    <option value="Healthcare">Healthcare</option>
                    <option value="Education">Education</option>
                    <option value="Finance">Finance</option>
                    <option value="Construction">Construction</option>
                    <option value="Retail">Retail</option>
                    <option value="Hospitality">Hospitality</option>
                    <option value="Other">Other</option>
                  </select>
                  
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Company Type</label>
                  <select class="form-control" name="company_type" required>
                    <option value="Small">Small</option>
                    <option value="Medium">Medium</option>
                    <option value="Large">Large</option>
                  </select>
                </div>

                <!-- Security Questions -->
                <div class="col-md-6">
                  <label class="form-label fw-bold">Security Question 1</label>
                  <select class="form-control" name="question1_subquestion" required></select>
                  <input type="text" class="form-control mt-2" name="answer1" required placeholder="Answer">
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Security Question 2</label>
                  <select class="form-control" name="question2_subquestion" required></select>
                  <input type="text" class="form-control mt-2" name="answer2" required placeholder="Answer">
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Security Question 3</label>
                  <select class="form-control" name="question3_subquestion"></select>
                  <input type="text" class="form-control mt-2" name="answer3" placeholder="Answer (optional)">
                </div>
              </div>

              <div class="d-grid mt-4">
                <button type="submit" class="n btn-outline-light mt-3 w-100">Register</button>
              </div>
              <div class="d-grid mt-2">
                <button type="button" class="n btn-outline-light mt-3 w-100" id="signupBackBtn">Back</button>
              </div>
              
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="{% static 'js/login.js' %}"></script>
</body>
</html>

// File: templates/modals/register.html
<div class="modal fade" id="signupModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <form id="signupForm" method="POST" enctype="multipart/form-data" action="{% url 'register' %}">
          {% csrf_token %}
          <div class="modal-body">
            <input type="hidden" name="user_type" id="user_type" value="applicant">

            <!-- User type toggle -->
            <div class="d-flex justify-content-center gap-5 mb-4">
              <div id="applicantIcon" class="type-toggle active-type" role="button">
                <img src="{% static 'img/applicant-icon.png' %}" width="48" alt="Applicant">
                <div class="fw-semibold mt-1 text-center">Applicant</div>
              </div>
              <div id="organizationIcon" class="type-toggle" role="button">
                <img src="{% static 'img/organization-icon.png' %}" width="48" alt="Organization">
                <div class="fw-semibold mt-1 text-center">Organization</div>
              </div>
            </div>

            <!-- Step 1 -->
            <div id="signupStep1" class="px-3 py-2">
              <div class="row g-4">
                <div class="col-md-6">
                  <label class="form-label fw-bold">Passport ID</label>
                  <input type="text" class="form-control" name="id_number" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Full Name</label>
                  <input type="text" class="form-control" name="full_name" required>
                </div>

                <div class="col-md-6">
                  <label class="form-label fw-bold">Phone</label>
                  <input type="tel" class="form-control" name="phone_number" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Age</label>
                  <input type="number" class="form-control" name="age" min="1" required>
                </div>

                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Country</label>
                  <input type="text" class="form-control" name="country">
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Address</label>
                  <input type="text" class="form-control" name="address">
                </div>

                <div class="col-md-6">
                  <label class="form-label fw-bold">Password</label>
                  <input type="password" class="form-control" name="password1" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Confirm Password</label>
                  <input type="password" class="form-control" name="password2" required>
                </div>
              </div>

              <div class="d-grid mt-4">
                <button type="button" class="n btn-outline-light mt-3 w-100" id="signupNextBtn">Next</button>
              </div>
            </div>

            <!-- Step 2 -->
            <div id="signupStep2" class="px-3 py-2 d-none">
              <div class="row g-4">      

                <!-- Applicant Specific -->
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Education</label>
                  <input type="text" class="form-control" name="education" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">CV</label>
                  <input type="file" class="form-control" name="cv" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Availability</label>
                  <select class="form-control" name="availability" required>
                    <option value="part-time">Part-time</option>
                    <option value="volunteer">Volunteer</option>
                    <option value="full-time">Full-time</option>
                  </select>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Preferred Location</label>
                  <input type="text" class="form-control" name="preferred_location" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Job Type Interested</label>
                  <select class="form-control" name="job_type_interest" required>
                    <option value="full-time">Full-time</option>
                    <option value="part-time">Part-time</option>
                    <option value="volunteer">Volunteer</option>
                  </select>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Skills</label>
                  <input type="text" class="form-control" name="skills" required>
                </div>
                <div class="col-md-6 applicant-only d-none">
                  <label class="form-label fw-bold">Location of Interest</label>
                  <input type="text" class="form-control" name="location_of_interest" required>
                </div>

                <!-- Organization Specific -->
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">License Number</label>
                  <input type="text" class="form-control" name="license_number" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Company Name</label>
                  <input type="text" class="form-control" name="company_name" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Establishment Date</label>
                  <input type="date" class="form-control" name="establishment_date" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Organization Location</label>
                  <input type="text" class="form-control" name="org_location" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Achievements</label>
                  <input type="text" class="form-control" name="achievements" required>
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Sector</label>
                  <select class="form-control" name="sector" required>
                    <option value="IT">IT</option>
                    <option value="NGO">NGO</option>
                    <option value="Aviation">Aviation</option>
                    <option value="Business">Business</option>
                    <option value="Healthcare">Healthcare</option>
                    <option value="Education">Education</option>
                    <option value="Finance">Finance</option>
                    <option value="Construction">Construction</option>
                    <option value="Retail">Retail</option>
                    <option value="Hospitality">Hospitality</option>
                    <option value="Other">Other</option>
                  </select>
                  
                </div>
                <div class="col-md-6 org-only d-none">
                  <label class="form-label fw-bold">Company Type</label>
                  <select class="form-control" name="company_type" required>
                    <option value="Small">Small</option>
                    <option value="Medium">Medium</option>
                    <option value="Large">Large</option>
                  </select>
                </div>

                <!-- Security Questions -->
                <div class="col-md-6">
                  <label class="form-label fw-bold">Security Question 1</label>
                  <select class="form-control" name="question1_subquestion" required></select>
                  <input type="text" class="form-control mt-2" name="answer1" required placeholder="Answer">
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Security Question 2</label>
                  <select class="form-control" name="question2_subquestion" required></select>
                  <input type="text" class="form-control mt-2" name="answer2" required placeholder="Answer">
                </div>
                <div class="col-md-6">
                  <label class="form-label fw-bold">Security Question 3</label>
                  <select class="form-control" name="question3_subquestion"></select>
                  <input type="text" class="form-control mt-2" name="answer3" placeholder="Answer (optional)">
                </div>
              </div>

              <div class="d-grid mt-4">
                <button type="submit" class="n btn-outline-light mt-3 w-100">Register</button>
              </div>
              <div class="d-grid mt-2">
                <button type="button" class="n btn-outline-light mt-3 w-100" id="signupBackBtn">Back</button>
              </div>
              
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
// File: urls.py
from django.contrib import admin
from django.urls import path, include
from accounts.views import signup_view

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', signup_view, name='login'),  # default landing page
    path('account/', include('accounts.urls')),
]

// File: users/__init__.py

// File: users/admin.py

// File: users/api/views.py

// File: users/forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import Applicant, Organization, SecurityQuestion

class LoginForm(forms.Form):
    id_number = forms.CharField(label="Passport ID", max_length=100)
    password = forms.CharField(widget=forms.PasswordInput)

# ----------------------------------------------------------
# APPLICANT REGISTRATION FORM
# ----------------------------------------------------------
class ApplicantRegisterForm(UserCreationForm):
    question1_subquestion = forms.ChoiceField(label="Select Question 1", required=True)
    answer1 = forms.CharField(label="Answer 1", required=True)

    question2_subquestion = forms.ChoiceField(label="Select Question 2", required=True)
    answer2 = forms.CharField(label="Answer 2", required=True)

    question3_subquestion = forms.ChoiceField(label="Select Question 3 (optional)", required=False)
    answer3 = forms.CharField(label="Answer 3 (optional)", required=False)

    class Meta:
        model = Applicant
        fields = [
            'id_number', 'full_name', 'email', 'phone_number', 'age', 'country', 'address',
            'education', 'cv', 'availability', 'preferred_location',
            'job_type_interest', 'skills', 'location_of_interest',
            'password1', 'password2'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        questions = list(SecurityQuestion.objects.all().order_by('id'))
        if len(questions) >= 3:
            q1, q2, q3 = questions[:3]
            self.fields['question1_subquestion'].choices = [
                (q1.option1, q1.option1), 
                (q1.option2, q1.option2), 
                (q1.option3, q1.option3)
            ]
            self.fields['question2_subquestion'].choices = [
                (q2.option1, q2.option1), 
                (q2.option2, q2.option2), 
                (q2.option3, q2.option3)
            ]
            self.fields['question3_subquestion'].choices = [
                (q3.option1, q3.option1), 
                (q3.option2, q3.option2), 
                (q3.option3, q3.option3)
            ]
    
    def clean_age(self):
        age_val = self.cleaned_data.get('age')
        if age_val and age_val < 18:
            raise forms.ValidationError("You must be at least 18 years old.")
        return age_val

    def clean(self):
        cleaned = super().clean()
        answers = [
            cleaned.get('answer1', '').strip(),
            cleaned.get('answer2', '').strip(),
            cleaned.get('answer3', '').strip()
        ]
        if sum(bool(a) for a in answers) < 2:
            raise forms.ValidationError("Please answer at least two security questions.")
        return cleaned


# ----------------------------------------------------------
# ORGANIZATION REGISTRATION FORM
# ----------------------------------------------------------
class OrganizationRegisterForm(UserCreationForm):
    question1_subquestion = forms.ChoiceField(label="Select Question 1", required=True)
    answer1 = forms.CharField(label="Answer 1", required=True)

    question2_subquestion = forms.ChoiceField(label="Select Question 2", required=True)
    answer2 = forms.CharField(label="Answer 2", required=True)

    question3_subquestion = forms.ChoiceField(label="Select Question 3 (optional)", required=False)
    answer3 = forms.CharField(label="Answer 3 (optional)", required=False)

    class Meta:
        model = Organization
        fields = [
            'id_number', 'full_name', 'email', 'phone_number',
            'license_number', 'company_name', 'establishment_date',
            'location', 'achievements', 'sector', 'company_type',
            'password1', 'password2'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        questions = list(SecurityQuestion.objects.all().order_by('id'))
        if len(questions) >= 3:
            q1, q2, q3 = questions[:3]
            self.fields['question1_subquestion'].choices = [
                (q1.option1, q1.option1), 
                (q1.option2, q1.option2), 
                (q1.option3, q1.option3)
            ]
            self.fields['question2_subquestion'].choices = [
                (q2.option1, q2.option1), 
                (q2.option2, q2.option2), 
                (q2.option3, q2.option3)
            ]
            self.fields['question3_subquestion'].choices = [
                (q3.option1, q3.option1), 
                (q3.option2, q3.option2), 
                (q3.option3, q3.option3)
            ]

    def clean(self):
        cleaned = super().clean()
        answers = [
            cleaned.get('answer1', '').strip(),
            cleaned.get('answer2', '').strip(),
            cleaned.get('answer3', '').strip()
        ]
        if sum(bool(a) for a in answers) < 2:
            raise forms.ValidationError("Please answer at least two security questions.")
        return cleaned

// File: users/managers.py
from django.contrib.auth.base_user import BaseUserManager

class ApplicantManager(BaseUserManager):
    def create_user(self, id_number, full_name, email, password=None, **extra_fields):
        if not id_number or not email:
            raise ValueError("Passport ID and email are required.")
        email = self.normalize_email(email)
        applicant = self.model(
            id_number=id_number,
            full_name=full_name,
            email=email,
            **extra_fields
        )
        applicant.set_password(password)
        applicant.save(using=self._db)
        return applicant

    def create_superuser(self, id_number, full_name, email, password=None, **extra_fields):
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(id_number, full_name, email, password, **extra_fields)


class OrganizationManager(BaseUserManager):
    def create_user(self, id_number, full_name, email, password=None, **extra_fields):
        if not id_number or not email:
            raise ValueError("Passport ID and email are required.")
        email = self.normalize_email(email)
        organization = self.model(
            id_number=id_number,
            full_name=full_name,
            email=email,
            **extra_fields
        )
        organization.set_password(password)
        organization.save(using=self._db)
        return organization

    def create_superuser(self, id_number, full_name, email, password=None, **extra_fields):
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(id_number, full_name, email, password, **extra_fields)

// File: users/migrations/0001_initial.py
# Generated by Django 5.2 on 2025-04-09 02:34

import django.db.models.deletion
import django.utils.timezone
import users.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SecurityQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('option1', models.CharField(max_length=255)),
                ('option2', models.CharField(max_length=255)),
                ('option3', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(max_length=150)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('job_seeker', 'Job Seeker'), ('job_poster', 'Job Poster')], max_length=20)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', users.managers.OrganizationManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApplicantProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education', models.TextField()),
                ('cv', models.FileField(upload_to='cvs/')),
                ('availability', models.CharField(choices=[('part-time', 'Part-time'), ('volunteer', 'Volunteer')], max_length=20)),
                ('preferred_location', models.CharField(max_length=100)),
                ('job_type_interest', models.CharField(choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')], max_length=20)),
                ('skills', models.TextField(blank=True)),
                ('location_of_interest', models.CharField(blank=True, max_length=100)),
                ('last_cv_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=100)),
                ('company_name', models.CharField(max_length=255)),
                ('establishment_date', models.DateField()),
                ('location', models.CharField(max_length=100)),
                ('achievements', models.TextField(blank=True)),
                ('sector', models.CharField(choices=[('IT', 'IT'), ('NGO', 'NGO'), ('Aviation', 'Aviation'), ('Business', 'Business')], max_length=50)),
                ('company_type', models.CharField(choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')], max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSecurityAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('answer', models.CharField(max_length=255)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.securityquestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_answers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

// File: users/migrations/0002_seed_security_questions.py
from django.db import migrations

def create_security_questions(apps, schema_editor):
    SecurityQuestion = apps.get_model('users', 'SecurityQuestion')

    SecurityQuestion.objects.create(
        question_text="Security Question 1",
        option1="Your first pet's name?",
        option2="Your favorite color?",
        option3="Your best friend's name?"
    )
    SecurityQuestion.objects.create(
        question_text="Security Question 2",
        option1="Your primary school?",
        option2="Your hometown?",
        option3="Your childhood nickname?"
    )
    SecurityQuestion.objects.create(
        question_text="Security Question 3",
        option1="Mother's maiden name?",
        option2="Favorite food?",
        option3="First job title?"
    )

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_security_questions),
    ]

// File: users/migrations/0003_user_address_user_country.py
# Generated by Django 5.2 on 2025-04-09 12:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_seed_security_questions'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='address',
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.AddField(
            model_name='user',
            name='country',
            field=models.CharField(blank=True, max_length=100),
        ),
    ]

// File: users/migrations/0004_remove_applicantprofile_user_and_more.py
# Generated by Django 5.2 on 2025-04-12 03:43

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0003_user_address_user_country'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='applicantprofile',
            name='user',
        ),
        migrations.RemoveField(
            model_name='organizationprofile',
            name='user',
        ),
        migrations.RemoveField(
            model_name='user',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_permissions',
        ),
        migrations.RemoveField(
            model_name='usersecurityanswer',
            name='question',
        ),
        migrations.RemoveField(
            model_name='usersecurityanswer',
            name='user',
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('age', models.PositiveIntegerField()),
                ('country', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=255)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('education', models.TextField()),
                ('cv', models.FileField(upload_to='cvs/')),
                ('availability', models.CharField(choices=[('part-time', 'Part-time'), ('volunteer', 'Volunteer'), ('full-time', 'Full-time')], max_length=20)),
                ('preferred_location', models.CharField(max_length=100)),
                ('job_type_interest', models.CharField(choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')], max_length=20)),
                ('skills', models.TextField(blank=True)),
                ('location_of_interest', models.CharField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this applicant belongs to.', related_name='applicant_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this applicant.', related_name='applicant_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApplicantSecurityAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('answer', models.CharField(max_length=255)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_answers', to='users.applicant')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.securityquestion')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('license_number', models.CharField(max_length=100)),
                ('company_name', models.CharField(max_length=255)),
                ('establishment_date', models.DateField()),
                ('location', models.CharField(max_length=100)),
                ('achievements', models.TextField(blank=True)),
                ('sector', models.CharField(choices=[('IT', 'IT'), ('NGO', 'NGO'), ('Aviation', 'Aviation'), ('Business', 'Business'), ('Healthcare', 'Healthcare'), ('Education', 'Education'), ('Finance', 'Finance'), ('Retail', 'Retail'), ('Hospitality', 'Hospitality'), ('Construction', 'Construction'), ('Other', 'Other')], max_length=50)),
                ('company_type', models.CharField(choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')], max_length=20)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this organization belongs to.', related_name='organization_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this organization.', related_name='organization_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationSecurityAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('answer', models.CharField(max_length=255)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_answers', to='users.organization')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.securityquestion')),
            ],
        ),
    ]

// File: users/migrations/0005_delete_applicantprofile_delete_organizationprofile_and_more.py
# Generated by Django 5.2 on 2025-04-12 03:43

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0002_alter_feedback_applicant_and_more'),
        ('users', '0004_remove_applicantprofile_user_and_more'),
    ]

    operations = [
        migrations.DeleteModel(
            name='ApplicantProfile',
        ),
        migrations.DeleteModel(
            name='OrganizationProfile',
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.DeleteModel(
            name='UserSecurityAnswer',
        ),
    ]

// File: users/migrations/__init__.py

// File: users/models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.utils import timezone

from .managers import ApplicantManager, OrganizationManager


class Applicant(AbstractBaseUser, PermissionsMixin):
    id_number = models.CharField(max_length=50, unique=True)
    full_name = models.CharField(max_length=150)
    email = models.EmailField(unique=True)
    phone_number = models.CharField(max_length=20)
    age = models.PositiveIntegerField()
    country = models.CharField(max_length=100)
    address = models.CharField(max_length=255)

    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)

    education = models.TextField()
    cv = models.FileField(upload_to='cvs/')
    availability = models.CharField(
        max_length=20,
        choices=[('part-time', 'Part-time'), ('volunteer', 'Volunteer'), ('full-time', 'Full-time')]
    )
    preferred_location = models.CharField(max_length=100)
    job_type_interest = models.CharField(
        max_length=20,
        choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')]
    )
    skills = models.TextField(blank=True)
    location_of_interest = models.CharField(max_length=100, blank=True)

    groups = models.ManyToManyField(
        'auth.Group',
        related_name='applicant_set',
        blank=True,
        help_text='The groups this applicant belongs to.',
        verbose_name='groups'
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='applicant_permissions',
        blank=True,
        help_text='Specific permissions for this applicant.',
        verbose_name='user permissions'
    )

    USERNAME_FIELD = 'id_number'
    REQUIRED_FIELDS = ['email', 'full_name']

    objects = ApplicantManager()

    def __str__(self):
        return f"Applicant: {self.full_name}"


class Organization(AbstractBaseUser, PermissionsMixin):
    id_number = models.CharField(max_length=50, unique=True) 
    full_name = models.CharField(max_length=150)
    email = models.EmailField(unique=True)
    phone_number = models.CharField(max_length=20)

    license_number = models.CharField(max_length=100)
    company_name = models.CharField(max_length=255)
    establishment_date = models.DateField()
    location = models.CharField(max_length=100)
    achievements = models.TextField(blank=True)
    sector = models.CharField(
        max_length=50,
        choices=[
            ('IT', 'IT'),
            ('NGO', 'NGO'),
            ('Aviation', 'Aviation'),
            ('Business', 'Business'),
            ('Healthcare', 'Healthcare'),
            ('Education', 'Education'),
            ('Finance', 'Finance'),
            ('Retail', 'Retail'),
            ('Hospitality', 'Hospitality'),
            ('Construction', 'Construction'),
            ('Other', 'Other'),
        ]
    )
    company_type = models.CharField(
        max_length=20,
        choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')]
    )

    groups = models.ManyToManyField(
        'auth.Group',
        related_name='organization_set',
        blank=True,
        help_text='The groups this organization belongs to.',
        verbose_name='groups'
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='organization_permissions',
        blank=True,
        help_text='Specific permissions for this organization.',
        verbose_name='user permissions'
    )

    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)

    USERNAME_FIELD = 'id_number'
    REQUIRED_FIELDS = ['email', 'full_name']

    objects = OrganizationManager()

    def __str__(self):
        return f"Organization: {self.company_name}"

    
class SecurityQuestion(models.Model):
    question_text = models.CharField(max_length=255)
    option1 = models.CharField(max_length=255)
    option2 = models.CharField(max_length=255)
    option3 = models.CharField(max_length=255)

    def __str__(self):
        return self.question_text


class ApplicantSecurityAnswer(models.Model):
    applicant = models.ForeignKey('Applicant', on_delete=models.CASCADE, related_name='security_answers')
    question = models.ForeignKey(SecurityQuestion, on_delete=models.CASCADE)
    question_text = models.CharField(max_length=255)
    answer = models.CharField(max_length=255)


class OrganizationSecurityAnswer(models.Model):
    organization = models.ForeignKey('Organization', on_delete=models.CASCADE, related_name='security_answers')
    question = models.ForeignKey(SecurityQuestion, on_delete=models.CASCADE)
    question_text = models.CharField(max_length=255)
    answer = models.CharField(max_length=255)

// File: users/urls.py
from django.urls import path
from . import views
from users.views import register_view 
from .views import get_security_questions

urlpatterns = [
    path('login/', views.login_view, name='login'),
    path('register/', views.register_view, name='register'),
    path('ajax/validate-login/', views.validate_login_ajax, name='validate_login_ajax'),
    path('forgot-password/', views.public_verify_security_answers, name='forgot_password_check'), 
    path('reset-password/', views.reset_password, name='reset_password'),
    path('security-questions/', get_security_questions, name='security_questions'),
]

// File: users/utils.py

// File: users/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponse
from django.contrib.auth import authenticate, login
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt

import json

from .forms import (
    LoginForm,
    ApplicantRegisterForm,
    OrganizationRegisterForm
)

from .models import (
    Applicant,
    Organization,
    SecurityQuestion,
    ApplicantSecurityAnswer,
    OrganizationSecurityAnswer
)

def home_redirect_view(request):
    return redirect('login')

def login_view(request):
    form = LoginForm(request.POST or None)
        
    if request.method == 'POST':
        if form.is_valid():
            id_number = form.cleaned_data.get('id_number')
            password = form.cleaned_data.get('password')

            try:
                user = Applicant.objects.get(id_number=id_number)
            except Applicant.DoesNotExist:
                try:
                    user = Organization.objects.get(id_number=id_number)
                except Organization.DoesNotExist:
                    messages.error(request, 'No user with that Passport ID was found.')
                    return render(request, 'login.html', {'form': form})

            user_auth = authenticate(request, username=user.id_number, password=password)
            if user_auth is not None:
                login(request, user_auth)
                return redirect('dashboard') 
            else:
                messages.error(request, 'Invalid credentials. Please try again.')

    return render(request, 'login.html', {'form': form})

@csrf_exempt
def validate_login_ajax(request):
    pass
    # if request.method == "POST":
    #     data = json.loads(request.body)
    #     id_number = data.get("id_number")
    #     password = data.get("password")

    #     try:
    #         user = User.objects.get(id_number=id_number)
    #         if user.check_password(password):
    #             return JsonResponse({"valid": True})
    #         else:
    #             return JsonResponse({"valid": False, "user_exists": True, "message": "Wrong password"})
    #     except User.DoesNotExist:
    #         return JsonResponse({"valid": False, "user_exists": False, "message": "User not found"})
        
@csrf_exempt
def register_view(request):
    if request.method == "POST":
        user_type = request.POST.get("user_type")
        if user_type == "applicant":
            form = ApplicantRegisterForm(request.POST, request.FILES)
            AnswerModel = ApplicantSecurityAnswer
            UserModel = Applicant
        elif user_type == "organization":
            form = OrganizationRegisterForm(request.POST)
            AnswerModel = OrganizationSecurityAnswer
            UserModel = Organization
        else:
            return JsonResponse({"success": False, "message": "Invalid user type"})

        if form.is_valid():
            user = form.save(commit=False)
            user.save()
            answers = [
                (form.cleaned_data["question1_subquestion"], form.cleaned_data["answer1"]),
                (form.cleaned_data["question2_subquestion"], form.cleaned_data["answer2"]),
                (form.cleaned_data["question3_subquestion"], form.cleaned_data["answer3"]),
            ]

            questions = list(SecurityQuestion.objects.all().order_by("id"))
            for idx, (q_text, ans) in enumerate(answers):
                if ans.strip():
                    question_obj = questions[idx] 
                    AnswerModel.objects.create(
                        **{user_type: user},
                        question=question_obj,
                        question_text=q_text,
                        answer=ans
                    )

            login(request, user)
            return JsonResponse({"success": True})

        return JsonResponse({"success": False, "errors": form.errors})

    return JsonResponse({"error": "Invalid method"}, status=400)

@csrf_exempt
def reset_password(request):
    if request.method == "POST":
        data = json.loads(request.body)
        id_number = data.get('id')
        new_password = data.get('newPassword')
        answers = data.get('answers')
        user_type = data.get('user_type')

        if user_type == 'applicant':
            from .models import Applicant as UserModel, ApplicantSecurityAnswer as AnswerModel
        elif user_type == 'organization':
            from .models import Organization as UserModel, OrganizationSecurityAnswer as AnswerModel
        else:
            return JsonResponse({'success': False, 'message': 'Invalid user type'})

        user = UserModel.objects.filter(id_number=id_number).first()
        if not user:
            return JsonResponse({'success': False, 'message': 'User not found'})

        correct = 0
        for ans in answers:
            if AnswerModel.objects.filter(
                **{user_type: user},
                question_text=ans['question'],
                answer__iexact=ans['answer']
            ).exists():
                correct += 1

        if correct >= 2:
            user.set_password(new_password)
            user.save()
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'message': 'Incorrect answers'})

    return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)

@csrf_exempt
def get_security_questions(request):
    if request.method == "GET":
        questions = SecurityQuestion.objects.all()
        data = []

        for q in questions:
            data.append({
                "id": q.id,
                "question_text": q.question_text,
                "options": [q.option1, q.option2, q.option3]
            })

        return JsonResponse(data, safe=False)

    return JsonResponse({"error": "Invalid request method"}, status=405)

@csrf_exempt
def public_verify_security_answers(request):
    if request.method == "POST":
        data = json.loads(request.body)
        id_number = data.get('id_number')
        user_type = data.get('user_type')
        answers = data.get('answers')

        if user_type == 'applicant':
            from .models import Applicant as UserModel, ApplicantSecurityAnswer as AnswerModel
        elif user_type == 'organization':
            from .models import Organization as UserModel, OrganizationSecurityAnswer as AnswerModel
        else:
            return JsonResponse({'valid': False, 'error': 'Invalid user type'})

        user = UserModel.objects.filter(id_number=id_number).first()
        if not user:
            return JsonResponse({'valid': False, 'error': 'User not found'}, status=404)

        correct = 0
        for ans in answers:
            if AnswerModel.objects.filter(
                **{user_type: user},
                question_text=ans["question"],
                answer__iexact=ans["answer"]
            ).exists():
                correct += 1

        return JsonResponse({'valid': correct >= 2})

    return JsonResponse({'valid': False, 'error': 'Invalid request'}, status=400)

