// File: backend/__init__.py

// File: backend/admin.py

// File: backend/api/views.py

// File: backend/forms.py

// File: backend/migrations/0001_initial.py
# Generated by Django 5.2 on 2025-04-13 12:36

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=50)),
                ('message_to_org', models.TextField(blank=True)),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application_id', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('job_type', models.CharField(choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')], max_length=20)),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=100)),
                ('requirements', models.TextField()),
                ('deadline', models.DateField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

// File: backend/migrations/0002_initial.py
# Generated by Django 5.2 on 2025-04-13 12:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('backend', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='feedback',
            name='applicant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.applicant'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='applicant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.applicant'),
        ),
        migrations.AddField(
            model_name='jobposting',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.organization'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.jobposting'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.jobposting'),
        ),
        migrations.AddField(
            model_name='message',
            name='job',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.jobposting'),
        ),
        migrations.AddField(
            model_name='message',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to='users.organization'),
        ),
        migrations.AddField(
            model_name='message',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='users.applicant'),
        ),
    ]

// File: backend/migrations/__init__.py

// File: backend/models.py
from django.db import models
from django.utils import timezone
from django.conf import settings

from users.models import Applicant, Organization


class JobPosting(models.Model):
    org = models.ForeignKey(Organization, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    job_type = models.CharField(max_length=20, choices=[
        ('full-time', 'Full-time'),
        ('part-time', 'Part-time'),
        ('volunteer', 'Volunteer')
    ])
    salary = models.DecimalField(max_digits=10, decimal_places=2)
    location = models.CharField(max_length=100)
    requirements = models.TextField()
    deadline = models.DateField()
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.title} at {self.org.company_name}"


class JobApplication(models.Model):
    applicant = models.ForeignKey(Applicant, on_delete=models.CASCADE)
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE)
    status = models.CharField(max_length=50, choices=[
        ('pending', 'Pending'),
        ('accepted', 'Accepted'),
        ('rejected', 'Rejected')
    ], default='pending')
    message_to_org = models.TextField(blank=True)
    feedback = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    application_id = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return f"Application {self.application_id} by {self.applicant.id_number}"


class Message(models.Model):
    sender = models.ForeignKey(Applicant, on_delete=models.CASCADE, related_name='sent_messages')
    receiver = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='received_messages')
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE, null=True, blank=True)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Message from {self.sender.id_number} to {self.receiver.id_number}"


class Feedback(models.Model):
    applicant = models.ForeignKey(Applicant, on_delete=models.CASCADE)
    job = models.ForeignKey(JobPosting, on_delete=models.CASCADE)
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True) #Fk job post id

    def __str__(self):
        return f"Feedback for {self.job.title} by {self.applicant.id_number}"

// File: backend/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls)
]

// File: backend/utils.py

// File: backend/views.py
from django.contrib.auth.backends import BaseBackend
from users.models import Applicant, Organization
from django.shortcuts import render, redirect
from users.models import JobPosting
from django.contrib.auth.decorators import login_required
from .models import Job



@login_required
def post_new_job(request):
    # Only organization users should access this view
    if hasattr(request.user, 'user_type') and request.user.user_type != 'organization':
        return redirect('applicant_dashboard')
    if request.method == 'POST':
        # Process the form submission for a new job
        title = request.POST.get('title')
        job_type = request.POST.get('job_type')
        location = request.POST.get('location')
        deadline = request.POST.get('deadline')
        # ... (validate inputs as needed)
        # Create new Job associated with this organization user
        Job.objects.create(
            title=title, job_type=job_type, location=location, deadline=deadline,
            owner=request.user, is_active=True
        )
        # Redirect back to organization dashboard (view postings)
        return redirect('org_dashboard')
    else:
        # Render a form for creating a new job
        return render(request, 'post_new_job.html', {})
    

// File: core/__init__.py

// File: core/asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_asgi_application()

// File: core/backends.py
from django.contrib.auth.backends import BaseBackend
from users.models import Applicant, Organization

class ApplicantOrOrgBackend(BaseBackend):
    def authenticate(self, request, username=None, password=None):
        try:
            user = Applicant.objects.get(id_number=username)
        except Applicant.DoesNotExist:
            try:
                user = Organization.objects.get(license_number=username)
            except Organization.DoesNotExist:
                return None
        if user.check_password(password):
            return user
        return None

    def get_user(self, user_id):
        from users.models import Applicant, Organization
        try:
            return Applicant.objects.get(pk=user_id)
        except Applicant.DoesNotExist:
            try:
                return Organization.objects.get(pk=user_id)
            except Organization.DoesNotExist:
                return None

// File: core/forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.core.exceptions import ValidationError
from users.models import Applicant, Organization, SecurityQuestion

class ApplicantRegisterForm(UserCreationForm):

    question1_subquestion = forms.ChoiceField(label="Select Question 1", required=True)
    answer1 = forms.CharField(label="Answer 1", required=True)
    question2_subquestion = forms.ChoiceField(label="Select Question 2", required=True)
    answer2 = forms.CharField(label="Answer 2", required=True)
    question3_subquestion = forms.ChoiceField(label="Select Question 3 (optional)", required=False)
    answer3 = forms.CharField(label="Answer 3 (optional)", required=False)
    cv = forms.FileField(required=False, label="Upload CV (optional)")

    class Meta:
        model = Applicant
        fields = [
            'id_number', 'full_name', 'email', 'phone_number', 'age', 'country', 'address',
            'education', 'cv', 'availability', 'preferred_location', 'job_type_interest',
            'skills', 'location_of_interest', 'password1', 'password2'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        questions = list(SecurityQuestion.objects.all().order_by('id'))
        if len(questions) >= 3:
            q1, q2, q3 = questions[:3]
            self.fields['question1_subquestion'].choices = [
                (q1.option1, q1.option1),
                (q1.option2, q1.option2),
                (q1.option3, q1.option3)
            ]
            self.fields['question2_subquestion'].choices = [
                (q2.option1, q2.option1),
                (q2.option2, q2.option2),
                (q2.option3, q2.option3)
            ]
            self.fields['question3_subquestion'].choices = [
                (q3.option1, q3.option1),
                (q3.option2, q3.option2),
                (q3.option3, q3.option3)
            ]

    def clean_age(self):
        age_val = self.cleaned_data.get('age')
        job_type_interest = self.cleaned_data.get('job_type_interest', '').strip()
        if age_val > 100:
            raise ValidationError("Age cannot exceed 100.")
        if job_type_interest == 'full-time':
            if age_val < 14:
                raise ValidationError("You must be at least 14 to register for a full-time job.")
            if age_val < 18:
                raise ValidationError("You must be at least 18 to register for a full-time job.")
        return age_val

    def clean(self):
        cleaned = super().clean()
        answers = [
            cleaned.get('answer1','').strip(),
            cleaned.get('answer2','').strip(),
            cleaned.get('answer3','').strip()
        ]
        if sum(bool(a) for a in answers) < 2:
            raise forms.ValidationError("Please answer at least two security questions.")
        return cleaned

class OrganizationRegisterForm(UserCreationForm):
    question1_subquestion = forms.ChoiceField(label="Select Question 1", required=True)
    answer1 = forms.CharField(label="Answer 1", required=True)
    question2_subquestion = forms.ChoiceField(label="Select Question 2", required=True)
    answer2 = forms.CharField(label="Answer 2", required=True)
    question3_subquestion = forms.ChoiceField(label="Select Question 3 (optional)", required=False)
    answer3 = forms.CharField(label="Answer 3 (optional)", required=False)

    class Meta:
        model = Organization
        fields = [
            'license_number', 'organization_name', 'organization_email', 'organization_phone',
            'establishment_date', 'location', 'achievements', 'sector', 'company_type',
            'password1', 'password2'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        questions = list(SecurityQuestion.objects.all().order_by('id'))
        if len(questions) >= 3:
            q1, q2, q3 = questions[:3]
            self.fields['question1_subquestion'].choices = [
                (q1.option1, q1.option1),
                (q1.option2, q1.option2),
                (q1.option3, q1.option3)
            ]
            self.fields['question2_subquestion'].choices = [
                (q2.option1, q2.option1),
                (q2.option2, q2.option2),
                (q2.option3, q2.option3)
            ]
            self.fields['question3_subquestion'].choices = [
                (q3.option1, q3.option1),
                (q3.option2, q3.option2),
                (q3.option3, q3.option3)
            ]

    def clean(self):
        cleaned = super().clean()
        answers = [
            cleaned.get('answer1','').strip(),
            cleaned.get('answer2','').strip(),
            cleaned.get('answer3','').strip()
        ]
        if sum(bool(a) for a in answers) < 2:
            raise forms.ValidationError("Please answer at least two security questions.")
        return cleaned

class LoginForm(forms.Form):
    id_number = forms.CharField(label="Passport/License ID", max_length=100)
    password = forms.CharField(widget=forms.PasswordInput)
// File: core/managers.py
from django.contrib.auth.base_user import BaseUserManager
from django.contrib.auth.views import LoginView
from django.urls import reverse

class ApplicantManager(BaseUserManager):
    def create_user(self, id_number, full_name, email, password=None, **extra_fields):
        if not id_number or not email:
            raise ValueError("ID Number and email are required.")
        email = self.normalize_email(email)
        applicant = self.model(
            id_number=id_number,
            full_name=full_name,
            email=email,
            **extra_fields
        )
        applicant.set_password(password)
        applicant.save(using=self._db)
        return applicant

    def create_superuser(self, id_number, full_name, email, password=None, **extra_fields):
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(id_number, full_name, email, password, **extra_fields)

class OrganizationManager(BaseUserManager):
    def create_user(self, license_number, full_name, email, password=None, **extra_fields):
        if not license_number or not email:
            raise ValueError("License number and email are required.")
        email = self.normalize_email(email)
        organization = self.model(
            license_number=license_number,
            full_name=full_name,
            email=email,
            **extra_fields
        )
        organization.set_password(password)
        organization.save(using=self._db)
        return organization

    def create_superuser(self, license_number, full_name, email, password=None, **extra_fields):
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(license_number, full_name, email, password, **extra_fields)


class RoleBasedLoginView(LoginView):
    def get_success_url(self):
        user = self.request.user
        if hasattr(user, 'user_type') and user.user_type == 'organization':
            return reverse('org_dashboard')
        else:
            return reverse('applicant_dashboard')
// File: core/settings.py
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# ENV Mode (optional feature toggle)
DEMO_MODE = os.getenv('DEMO_MODE') == 'True'

SECRET_KEY = os.getenv('SECRET_KEY', 'a-strong-dev-secret-key')
DEBUG = os.getenv('DEBUG', 'True') == 'True'
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'users',
    'backend',
    'core',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'eventwork_db'),
        'USER': os.getenv('POSTGRES_USER', 'eventwork_user'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'eventwork_pass'),
        'HOST': os.getenv('POSTGRES_HOST', 'db'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

LOGIN_REDIRECT_URL = '/dashboard/redirect/'


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: core/urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

from .views import (
    home_redirect_view, 
    login_view, 
    register_view, 
    base_redirect_view,
    logout_view,
    check_uniqueness,
    applicant_dashboard,
    
)

urlpatterns = [
 
    path('', home_redirect_view, name='home'),
    path('admin/', admin.site.urls),
    path('accounts/login/', login_view, name='login'),

    path('register/', register_view, name='register'),
    path('base/', base_redirect_view, name='base'),
    path('logout/', logout_view, name='logout'),
    path('account/check_uniqueness/', check_uniqueness, name='check_uniqueness'),
    path('account/', include('users.urls')),
    path('dashboard/applicant/', applicant_dashboard, name='applicant_dashboard'),
    path('jobs/', include('backend.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

// File: core/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET
from django.contrib.auth.decorators import login_required

import json
from .forms import LoginForm
from django.contrib import messages
from django.http import JsonResponse

from backend.models import (
    JobPosting
)

from .forms import (
    LoginForm, 
    ApplicantRegisterForm, 
    OrganizationRegisterForm
)

from users.models import (
    Applicant, 
    Organization, 
    SecurityQuestion, 
    ApplicantSecurityAnswer, 
    OrganizationSecurityAnswer
)

def home_redirect_view(request):
    return redirect('login')

def login_view(request):
    form = LoginForm(request.POST if request.method == 'POST' else None)
    security_questions = SecurityQuestion.objects.all().order_by('id')[:3]
    context = {
        'form': form,
        'security_questions': security_questions,
    }

    if request.method == 'POST' and form.is_valid():
        id_number = form.cleaned_data['id_number']
        password = form.cleaned_data['password']
        user = None
        username_for_auth = None

        try:
            user = Applicant.objects.get(id_number=id_number)
            username_for_auth = user.id_number
        except Applicant.DoesNotExist:
            try:
                user = Organization.objects.get(license_number=id_number)
                username_for_auth = user.license_number
            except Organization.DoesNotExist:
                messages.error(request, 'No user with that ID was found.')
                return render(request, 'login.html', context)

        if not user.is_active:
            messages.error(request, 'Your account is not active.')
            return render(request, 'login.html', context)

        user_auth = authenticate(request, username=username_for_auth, password=password)

        if user_auth:
            login(request, user_auth)
            if isinstance(user_auth, Applicant):
                return redirect('applicant_dashboard')
            elif isinstance(user_auth, Organization):
                return redirect('organization_dashboard')
        else:
            messages.error(request, 'Invalid credentials.')

    return render(request, 'login.html', context)


@login_required
def base_redirect_view(request):
    return render(request, 'base')

@login_required
def organization_dashboard(request):
    if not hasattr(request.user, 'license_number'):
        return redirect('applicant_dashboard')

    jobs = JobPosting.objects.filter(org=request.user, is_active=True)
    return render(request, 'dashboards/organization_dashboard.html', {'jobs': jobs})

@login_required
def applicant_dashboard(request):
    if not hasattr(request.user, 'id_number'):
        return redirect('org_dashboard')

    query = request.GET.get('q', '')
    job_type = request.GET.get('job_type', '')
    jobs = JobPosting.objects.filter(is_active=True)
    if query:
        jobs = jobs.filter(title__icontains=query)
    if job_type:
        jobs = jobs.filter(job_type=job_type)

    return render(request, 'dashboards/applicant_dashboard.html', {
        'jobs': jobs,
        'search_query': query,
        'selected_job_type': job_type
    })

@csrf_exempt
def register_view(request):
    if request.method == 'POST':
        user_type = request.POST.get('user_type')
        if user_type == 'applicant':
            form = ApplicantRegisterForm(request.POST, request.FILES)
            AnswerModel = ApplicantSecurityAnswer
        elif user_type == 'organization':
            form = OrganizationRegisterForm(request.POST)
            AnswerModel = OrganizationSecurityAnswer
        else:
            return JsonResponse({'success': False, 'message': 'Invalid user type'})
        if form.is_valid():
            user = form.save(commit=False)
            user.pk = None
            user.set_password(form.cleaned_data['password1'])
            user.is_active = True
            user.save()
            answers = [
                (form.cleaned_data['question1_subquestion'], form.cleaned_data['answer1']),
                (form.cleaned_data['question2_subquestion'], form.cleaned_data['answer2']),
                (form.cleaned_data['question3_subquestion'], form.cleaned_data['answer3'])
            ]
            questions = list(SecurityQuestion.objects.all().order_by('id'))
            for idx, (q_text, ans) in enumerate(answers):
                if ans.strip():
                    question_obj = questions[idx]
                    if user_type == 'applicant':
                        AnswerModel.objects.create(
                            applicant=user,
                            question=question_obj,
                            question_text=q_text,
                            answer=ans
                        )
                    else:
                        AnswerModel.objects.create(
                            organization=user,
                            question=question_obj,
                            question_text=q_text,
                            answer=ans
                        )
            login(request, user, backend='django.contrib.auth.backends.ModelBackend')
            return redirect('login')
        else:
            return JsonResponse({'success': False, 'errors': form.errors})
    return JsonResponse({'error': 'Invalid method'}, status=400)

@csrf_exempt
def get_security_questions(request):
    if request.method == 'GET':
        id_number = request.GET.get('id_number', '').strip()
        if not id_number:
            return JsonResponse([], safe=False)
        applicant = Applicant.objects.filter(id_number=id_number).first()
        if applicant:
            answers = applicant.security_answers.all()
        else:
            org = Organization.objects.filter(license_number=id_number).first()
            if not org:
                return JsonResponse([], safe=False)
            answers = org.security_answers.all()
        questions = []
        for ans in answers:
            questions.append({
                "question_text": ans.question_text
            })
        return JsonResponse(questions, safe=False)
    return JsonResponse({'error': 'Invalid request method'}, status=405)

@require_GET
def get_security_questions_choices(request):
    qs = SecurityQuestion.objects.all().order_by('id')[:3]
    data = []
    for q in qs:
        data.append({
            "question_text": q.question_text,
            "options": [q.option1, q.option2, q.option3]
        })
    return JsonResponse(data, safe=False)

@csrf_exempt
def public_verify_security_answers(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        id_number = data.get('id_number')
        user_type = data.get('user_type')
        answers = data.get('answers', [])
        if user_type == 'applicant':
            user = Applicant.objects.filter(id_number=id_number).first()
            if not user:
                return JsonResponse({'valid': False, 'error': 'User not found'}, status=404)
            correct = 0
            for ans in answers:
                if user.security_answers.filter(
                    question_text=ans['question'],
                    answer__iexact=ans['answer']
                ).exists():
                    correct += 1
            return JsonResponse({'valid': correct >= 2})
        elif user_type == 'organization':
            user = Organization.objects.filter(license_number=id_number).first()
            if not user:
                return JsonResponse({'valid': False, 'error': 'User not found'}, status=404)
            correct = 0
            for ans in answers:
                if user.security_answers.filter(
                    question_text=ans['question'],
                    answer__iexact=ans['answer']
                ).exists():
                    correct += 1
            return JsonResponse({'valid': correct >= 2})
        return JsonResponse({'valid': False, 'error': 'Invalid user type'})
    return JsonResponse({'valid': False, 'error': 'Invalid request'}, status=400)

def check_uniqueness(request):
    id_code = request.GET.get("id_code")
    email = request.GET.get("email")
    user_type = request.GET.get("user_type")
    response = {}
    if user_type == "applicant":
        if id_code:
            exists = (Applicant.objects.filter(id_number=id_code).exists() or Organization.objects.filter(license_number=id_code).exists())
            response["id_code_exists"] = exists
        if email:
            exists = (Applicant.objects.filter(email=email).exists() or Organization.objects.filter(organization_email=email).exists())
            response["email_exists"] = exists
    elif user_type == "organization":
        if id_code:
            exists = (Organization.objects.filter(license_number=id_code).exists() or Applicant.objects.filter(id_number=id_code).exists())
            response["id_code_exists"] = exists
        if email:
            exists = (Organization.objects.filter(organization_email=email).exists() or Applicant.objects.filter(email=email).exists())
            response["email_exists"] = exists
    else:
        return JsonResponse({"error": "Invalid user type"}, status=400)
    if response:
        return JsonResponse(response)
    return JsonResponse({"error": "Invalid request"}, status=400)

def logout_view(request):
    logout(request)
    return redirect('login')
// File: core/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_wsgi_application()

// File: manage.py
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

// File: static/css/dashboard.css

// File: static/css/login.css
:root {
  --bg-main: #d0d6d6;
  --bg-secondary: #86b9b0;
  --btn-main: #4c7273;
  --btn-hover: #365c5c;
  --text-main: #041421;
  --text-subtle: #042630;
  --white: #ffffff;
}

body {
  background-color: var(--bg-main);
  color: var(--text-main);
  font-family: 'Segoe UI', sans-serif;
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-image: radial-gradient(ellipse at center, rgba(76, 114, 115, 0.15) 0%, transparent 70%);
  background-repeat: no-repeat;
  background-position: center;
}

.login-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex-grow: 1;
}

.login-box {
  background: var(--bg-secondary);
  padding: 3.5rem;
  border-radius: 16px;
  max-width: 460px;
  width: 100%;
  box-shadow: 0 4px 30px rgba(76, 114, 115, 0.3);
  border: 2px solid var(--btn-main);
  text-align: center;
}

.login-box h2 {
  color: var(--text-main);
  font-weight: 700;
  margin-bottom: 1.5rem;
  font-size: 1.6rem;
}

.form-label {
  color: var(--text-subtle);
  font-weight: 600;
  text-align: left;
  display: block;
  margin-top: 0.75rem;
  margin-bottom: 0.25rem;
  font-size: 0.95rem;
}

input.form-control {
  background-color: var(--white);
  border: 1px solid var(--btn-main);
  color: var(--text-main);
  margin-bottom: 1rem;
  padding: 0.5rem 0.75rem;
  font-size: 1rem;
  font-weight: 500;
  border-radius: 8px;
}

.btn,
.btn-login,
.btn-outline-light,
.btn-register {
  font-weight: 700;
  font-size: 0.95rem;
  padding: 0.5rem 1rem;
  border-radius: 10px;
  transition: all 0.2s ease;
  width: 100%;
}

.btn-login,
.btn-register,
#signupSubmitBtn {
  background-color: var(--btn-main);
  color: var(--white);
  border: 1px solid var(--btn-main);
}

.btn-login:hover,
.btn-register:hover,
#signupSubmitBtn:hover {
  background-color: var(--btn-hover);
  border-color: var(--btn-hover);
}

.btn-outline-light {
  background-color: var(--btn-main);
  color: var(--white);
  border: 1px solid var(--btn-main);
}

.btn-outline-light:hover {
  background-color: var(--btn-hover);
  border-color: var(--btn-hover);
  color: var(--white);
}

footer.login-footer {
  font-size: 0.85rem;
  color: var(--text-subtle);
  padding: 1rem 0;
  text-align: center;
  font-weight: 500;
}

.type-toggle {
  padding: 6px;
  border-radius: 10px;
  border: 2px solid transparent;
  cursor: pointer;
  transition: 0.3s ease-in-out;
}

.type-toggle.active-type {
  border-color: var(--btn-main);
  background-color: var(--btn-hover);
}

.type-toggle.disabled {
  pointer-events: none;
  opacity: 0.5;
}


// File: static/css/main.css

// File: static/css/theme.css
/* theme.css: CSS variables and styles for EventWork Connect */
:root {
    --bg-main: #d0d6d6;
    --bg-secondary: #86b9b0;
    --btn-main: #4c7273;
    --btn-hover: #365c5c;
    --text-main: #041421;
    --text-subtle: #042630;
    --white: #ffffff;
  }
  
  /* Overall page style */
  body {
    background-color: var(--bg-main);
    color: var(--text-main);
    font-family: Arial, sans-serif;
    margin: 0;
  }
  
  /* Header and navigation */
  header {
    background-color: var(--bg-secondary);
    padding: 10px;
  }
  header .nav-right {
    float: right;
  }
  header .nav-right a {
    color: var(--white);
    text-decoration: none;
    margin-left: 20px;
    font-weight: bold;
  }
  header .nav-right a:hover {
    text-decoration: underline;
  }
  
  /* Footer style */
  footer {
    background-color: var(--bg-secondary);
    color: var(--white);
    text-align: center;
    padding: 8px;
    margin-top: 20px;
  }
  
  /* Search bar and job list (Applicant Dashboard) */
  .search-bar {
    background-color: var(--bg-secondary);
    padding: 10px;
    margin-bottom: 15px;
  }
  .search-bar input, .search-bar select {
    padding: 5px;
    margin-right: 5px;
  }
  .search-bar button {
    background-color: var(--btn-main);
    color: var(--white);
    border: none;
    padding: 6px 12px;
    cursor: pointer;
  }
  .search-bar button:hover {
    background-color: var(--btn-hover);
  }
  
  /* Job posting cards (Applicant Dashboard) */
  .job-card {
    background-color: var(--white);
    border: 1px solid var(--bg-secondary);
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 10px;
  }
  .job-card h3 {
    margin: 0 0 5px 0;
  }
  .job-card p {
    color: var(--text-subtle);
    margin: 5px 0;
  }
  .apply-btn {
    background-color: var(--btn-main);
    color: var(--white);
    text-decoration: none;
    padding: 6px 12px;
    border-radius: 4px;
  }
  .apply-btn:hover {
    background-color: var(--btn-hover);
  }
  
  /* Organization Dashboard styles */
  .org-actions {
    margin: 10px 0;
  }
  .org-actions a {
    background-color: var(--btn-main);
    color: var(--white);
    text-decoration: none;
    padding: 8px 15px;
    margin-right: 10px;
    border-radius: 4px;
  }
  .org-actions a:hover {
    background-color: var(--btn-hover);
  }
  
  /* Jobs table (Organization Dashboard) */
  .jobs-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
  }
  .jobs-table th, .jobs-table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ccc;
  }
  .jobs-table th {
    background-color: var(--bg-secondary);
    color: var(--white);
  }
  .jobs-table tr:nth-child(even) {
    background-color: #efefef;
  }
  /* Action links in the table */
  .jobs-table a {
    color: var(--text-main);
    text-decoration: none;
    margin-right: 5px;
  }
  .jobs-table a:hover {
    text-decoration: underline;
  }
  /* Delete button styled as link */
  .link-btn {
    background: none;
    border: none;
    color: var(--text-main);
    cursor: pointer;
    padding: 0;
    font: inherit;
  }
  .link-btn:hover {
    text-decoration: underline;
  }
  /* New Job form adjustments */
  form label {
    font-weight: bold;
  }
  form input, form select {
    margin-top: 4px;
    margin-bottom: 12px;
    padding: 5px;
    width: 50%;
  }
  .cancel-link {
    margin-left: 10px;
    text-decoration: none;
    color: var(--text-subtle);
  }
  .cancel-link:hover {
    text-decoration: underline;
  }
  
// File: templates/base.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>EventWork Connect</title>
  <!-- Link the CSS theme -->
  <link rel="stylesheet" href="{% static 'css/theme.css' %}">
</head>
<body>

  <div class="nav-right">
    {% if user.is_authenticated %}

        <a href="{% url 'profile' %}">Profile</a>
        <a href="{% url 'chat' %}">Chat</a>
        <a href="{% url 'logout' %}">Logout</a>

    {% endif %}
  </div>
  

  <main>
    {% block content %}
      {% if user.is_authenticated %}
        {% if user.applicant %}
          {% include "dashboards/applicant_dashboard.html" %}
        {% elif user.organization %}
          {% include "dashboards/organization_dashboard.html" %}
        {% endif %}
      {% else %}
        <p>Please login to continue.</p>
      {% endif %}
    {% endblock %}
  </main>
  

  <footer>
    <p>&copy; 2025 EventWork Connect. All rights reserved.</p>
  </footer>

</body>
</html>

// File: templates/dashboards/applicant_dashboard.html
{% extends "base.html" %}
{% load static %}

{% block content %}

  <h2>Find Opportunities</h2>
  <div class="search-bar">
    <form method="get" action="">
      <input type="text" name="q" placeholder="Search jobs..." value="{{ search_query|default:'' }}">
      <select name="job_type">
        <option value="">All Types</option>
        <option value="full-time" {% if selected_job_type == "full-time" %}selected{% endif %}>Full-time</option>
        <option value="part-time" {% if selected_job_type == "part-time" %}selected{% endif %}>Part-time</option>
        <option value="volunteer" {% if selected_job_type == "volunteer" %}selected{% endif %}>Volunteer</option>
      </select>
      <button type="submit">Search</button>
    </form>
  </div>

  <div class="job-list">
    {% for job in jobs %}
      <div class="job-card">
        <h3>{{ job.title }}</h3>
        <p>
          <strong>Type:</strong> {{ job.job_type }} &middot;
          <strong>Location:</strong> {{ job.location }} &middot;
          <strong>Deadline:</strong> {{ job.deadline }}
        </p>
        <a href="{% url 'apply_job' job.id %}" class="apply-btn">Apply</a>
      </div>
    {% empty %}
      <p>No jobs found.</p>
    {% endfor %}
  </div>
<style>
.search-bar {
  display: flex;
  gap: 10px;
  margin-bottom: 1.5rem;
}

.job-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.job-card {
  background-color: var(--white);
  border: 1px solid var(--btn-main);
  border-radius: 10px;
  padding: 1rem;
  box-shadow: 0 2px 10px rgba(76, 114, 115, 0.1);
}

.apply-btn {
  display: inline-block;
  margin-top: 10px;
  padding: 0.4rem 0.8rem;
  background-color: var(--btn-main);
  color: var(--white);
  border-radius: 6px;
  text-decoration: none;
  font-weight: 600;
  transition: 0.2s ease;
}

.apply-btn:hover {
  background-color: var(--btn-hover);
}

</style>

{% endblock %}

// File: templates/dashboards/organization_dashboard.html
{% extends "base.html" %}
{% load static %}

{% block content %}

  <h2>Organization Dashboard</h2>
  <!-- Action links for the organization -->
  <div class="org-actions">
    <a href="{% url 'org_dashboard' %}">View Postings</a>
    <a href="{% url 'org_post_new' %}">Post New Job</a>
  </div>

  <!-- List of the organization's active job postings -->
  <h3>Your Job Postings</h3>
  <table class="jobs-table">
    <thead>
      <tr>
        <th>Title</th><th>Type</th><th>Location</th><th>Deadline</th><th>Actions</th>
      </tr>
    </thead>
    <tbody>
    {% for job in jobs %}
      <tr>
        <td>{{ job.title }}</td>
        <td>{{ job.job_type }}</td>
        <td>{{ job.location }}</td>
        <td>{{ job.deadline }}</td>
        <td>
          <a href="{% url 'view_applicants' job.id %}">View Applicants</a> | 
          <a href="{% url 'shortlist_job' job.id %}">Shortlist</a> | 
          <a href="{% url 'message_applicants' job.id %}">Message</a> | 
          <form action="{% url 'delete_job' job.id %}" method="post" style="display:inline;">
            {% csrf_token %}
            <button type="submit" class="link-btn">Delete</button>
          </form>
        </td>
      </tr>
    {% empty %}
      <tr><td colspan="5"><em>No active job postings.</em></td></tr>
    {% endfor %}
    </tbody>
  </table>

{% endblock %}

// File: templates/login.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>EventWork Connect - Login</title>
  <link rel="stylesheet" href="{% static 'css/login.css' %}">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  {% comment %} Login MAIN PAGE {% endcomment %}
  <div class="login-wrapper">
    {% include "modals/login_main.html" %}
  </div>

  {% comment %} FORGOT PASSWORD MODAL {% endcomment %}
  <div class="modal fade" id="forgotModal" tabindex="-1" aria-hidden="true">
    {% include "modals/login_forgot_password.html" %}
  </div>

  {% comment %} REGISTER FORMS MODAL {% endcomment %}
  <div class="modal fade" id="signupModal" tabindex="-1" aria-hidden="true">
    {% include "modals/register.html" %}
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="{% static 'js/login.js' %}"></script>
</body>
</html>

// File: templates/modals/login_forgot_password.html
{% load static %}

<!-- Forgot Password Modal -->
<div class="modal-dialog modal-dialog-centered">
  <div class="modal-content">
    <form id="forgotForm">
      <div class="modal-header">
        <h5 class="modal-title">Reset Password</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <label for="forgotId" class="form-label">Enter your ID</label>
        <input type="text" id="forgotId" class="form-control" required>
        <!-- The security questions will be inserted here once retrieved -->
        <div id="securityQuestions" class="mt-3 d-none"></div>
        <!-- Error message area for invalid ID or unanswered security questions -->
        <p class="text-danger small mt-2" id="forgotError"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="n btn-outline-light" data-bs-dismiss="modal">Close</button>
        <!-- "Verify" button triggers fetching/displaying security questions -->
        <button type="button" class="n btn-outline-light" id="verifyBtn">Verify</button>
      </div>
    </form>
  </div>
</div>

<!-- New Password Modal -->
<div class="modal-dialog modal-dialog-centered" id="newPasswordModal" style="display:none;">
  <div class="modal-content">
    <form id="newPasswordForm">
      <div class="modal-header">
        <h5 class="modal-title">Set New Password</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input type="password" id="newPw" class="form-control mb-2" placeholder="New Password" required>
        <input type="password" id="confirmPw" class="form-control" placeholder="Confirm Password" required>
        <!-- Error message area for password validation -->
        <p class="text-danger small mt-2" id="newPwError"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="n btn-outline-light" data-bs-dismiss="modal">Close</button>
        <button type="button" class="n btn-outline-light" id="resetPwBtn">Reset Password</button>
      </div>
    </form>
  </div>
</div>

<!-- Inline CSS to highlight errors -->
<style>
  .error-border {
    border: 2px solid red;
  }
</style>

<!-- Inline JavaScript for basic validation -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  var verifyBtn = document.getElementById("verifyBtn");
  var forgotIdInput = document.getElementById("forgotId");
  var forgotError = document.getElementById("forgotError");
  var securityQuestionsDiv = document.getElementById("securityQuestions");

  // Verify button click: validate ID and display security questions
  verifyBtn.addEventListener("click", function() {
    // Clear previous errors
    forgotError.textContent = "";
    forgotIdInput.classList.remove("error-border");

    var idVal = forgotIdInput.value.trim();
    if (!idVal) {
      forgotError.textContent = "Please enter your ID.";
      forgotIdInput.classList.add("error-border");
      return;
    }
    // Simulated ID check: if the ID equals "wrong", mark as invalid.
    if (idVal === "wrong") {
      forgotError.textContent = "The ID entered does not exist.";
      forgotIdInput.classList.add("error-border");
      securityQuestionsDiv.innerHTML = "";
      securityQuestionsDiv.classList.add("d-none");
      return;
    }

    // If valid, display dummy security questions.
    // (Replace this section with your AJAX call to fetch security questions.)
    var questionsHtml = "";
    questionsHtml += '<div class="mb-2">';
    questionsHtml += '  <label class="form-label">What is your favorite color?</label>';
    questionsHtml += '  <input type="text" class="form-control" id="secQ1" placeholder="Your answer" required>';
    questionsHtml += '</div>';
    questionsHtml += '<div class="mb-2">';
    questionsHtml += '  <label class="form-label">What is your pet\'s name?</label>';
    questionsHtml += '  <input type="text" class="form-control" id="secQ2" placeholder="Your answer" required>';
    questionsHtml += '</div>';
    // Button to submit security answers.
    questionsHtml += '<button type="button" class="n btn-outline-light mt-2" id="verifyAnswersBtn">Submit Answers</button>';

    securityQuestionsDiv.innerHTML = questionsHtml;
    securityQuestionsDiv.classList.remove("d-none");
  });

  // Delegate click event for dynamically added "Submit Answers" button.
  document.addEventListener("click", function(e) {
    if (e.target && e.target.id === "verifyAnswersBtn") {
      var secQ1 = document.getElementById("secQ1");
      var secQ2 = document.getElementById("secQ2");
      var allFilled = true;

      // Validate that both answer fields are filled
      if (!secQ1.value.trim()) {
        secQ1.classList.add("error-border");
        allFilled = false;
      } else {
        secQ1.classList.remove("error-border");
      }
      if (!secQ2.value.trim()) {
        secQ2.classList.add("error-border");
        allFilled = false;
      } else {
        secQ2.classList.remove("error-border");
      }
      if (!allFilled) {
        forgotError.textContent = "Please answer all security questions.";
        return;
      }

      // If security questions are answered, show the New Password Modal.
      document.getElementById("newPasswordModal").style.display = "block";
    }
  });

  // Validate new password fields for matching values.
  var resetPwBtn = document.getElementById("resetPwBtn");
  var newPwInput = document.getElementById("newPw");
  var confirmPwInput = document.getElementById("confirmPw");
  var newPwError = document.getElementById("newPwError");

  resetPwBtn.addEventListener("click", function() {
    newPwError.textContent = "";
    newPwInput.classList.remove("error-border");
    confirmPwInput.classList.remove("error-border");

    var newPw = newPwInput.value.trim();
    var confirmPw = confirmPwInput.value.trim();

    if (!newPw || !confirmPw) {
      newPwError.textContent = "Both password fields are required.";
      if (!newPw) newPwInput.classList.add("error-border");
      if (!confirmPw) confirmPwInput.classList.add("error-border");
      return;
    }
    if (newPw !== confirmPw) {
      newPwError.textContent = "Passwords do not match.";
      newPwInput.classList.add("error-border");
      confirmPwInput.classList.add("error-border");
      return;
    }

    // At this point the new passwords match.
    // Proceed with your AJAX call for resetting the password.
    alert("Password has been reset successfully.");
    // Hide the new password modal (you can integrate with your modal library as needed)
    document.getElementById("newPasswordModal").style.display = "none";
  });
});
</script>

// File: templates/modals/login_main.html
{% load static %}

<div class="login-box">
    <div class="text-center mb-4">
      <img src="{% static 'img/logo.png' %}" alt="EventWork Connect Logo" width="90" />
      <h2 class="mt-2">Welcome to EventWork</h2>
    </div>
    <form method="POST" id="loginForm" action="{% url 'login' %}">
      {% csrf_token %}
      <label for="id_number" class="form-label">Passport/License ID</label>
      <input
        type="text"
        id="id_number"
        name="id_number"
        class="form-control"
        required
        placeholder="Enter your ID"
      >
      <label for="password" class="form-label">Password</label>
      <input
        type="password"
        id="password"
        name="password"
        class="form-control"
        required
        placeholder="Enter password"
      >
      <button type="submit" class="n btn-outline-light mt-3 w-100">Login</button>
    </form>
    <button
      type="button"
      class="n btn-outline-light mt-3 w-100"
      data-bs-toggle="modal"
      data-bs-target="#signupModal"
    >
      Sign Up
    </button>
    <button
      type="button"
      class="n btn-outline-light mt-3 w-100"
      data-bs-toggle="modal"
      data-bs-target="#forgotModal"
    >
      Forgot Password?
    </button>
    <div class="text-danger mt-2 fw-semibold" id="loginError"></div>
  </div>

  <footer class="login-footer">
    <p>&copy; 2025 EventWork Connect</p>
  </footer>
// File: templates/modals/register.html
{% load static %}

<div class="modal-dialog modal-lg modal-dialog-centered">
  <div class="modal-content">
    <form id="signupForm" method="POST" enctype="multipart/form-data" action="{% url 'register' %}">
      {% csrf_token %}
      <div class="modal-body">
        <input type="hidden" name="user_type" id="user_type" value="applicant">
        <div id="userTypeIcons" class="d-flex justify-content-center gap-5 mb-4">
          <div id="applicantIcon" class="type-toggle active-type" role="button">
            <img src="{% static 'img/applicant-icon.png' %}" width="48" alt="Applicant">
            <div class="fw-semibold mt-1 text-center">Applicant</div>
          </div>
          <div id="organizationIcon" class="type-toggle" role="button">
            <img src="{% static 'img/organization-icon.png' %}" width="48" alt="Organization">
            <div class="fw-semibold mt-1 text-center">Organization</div>
          </div>
        </div>        

        <div id="signupStep1" class="px-3 py-2">
          <div class="row g-4">
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">
                Passport ID
              </label>
              <input type="text" class="form-control" name="id_number">
              <div class="id-code-error text-danger mt-1"></div>
            </div>

            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">
                License Number
              </label>
              <input type="text" class="form-control" name="license_number">
              <div class="id-code-error text-danger mt-1"></div>
            </div>

            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">
                Full Name
              </label>
              <input type="text" class="form-control" name="full_name">
            </div>

            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">
                Organization Name
              </label>
              <input type="text" class="form-control" name="organization_name">
            </div>

            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">
                Email
              </label>
              <input type="email" class="form-control" name="email">
              <div class="email-error text-danger mt-1"></div>
            </div>

            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">
                Organization Email
              </label>
              <input type="email" class="form-control" name="organization_email">
              <div class="email-error text-danger mt-1"></div>
            </div>

            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">
                Phone
              </label>
              <input type="tel" class="form-control" name="phone_number">
            </div>

            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">
                Organization Phone
              </label>
              <input type="tel" class="form-control" name="organization_phone">
            </div>

            <div class="col-md-6">
              <label class="form-label fw-bold">
                Password
              </label>
              <input type="password" class="form-control" name="password1">
            </div>

            <div class="col-md-6">
              <label class="form-label fw-bold">
                Confirm Password
              </label>
              <input type="password" class="form-control" name="password2">
            </div>

          </div>
          <div class="d-grid mt-4">
            <button type="button" class="n btn-outline-light mt-3 w-100" id="signupNextBtn">Next</button>
          </div>
        </div>

        <div id="signupStep2" class="px-3 py-2 d-none">
          <div class="row g-4">
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Age</label>
              <input type="number" class="form-control" name="age" min="1">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Country</label>
              <input type="text" class="form-control" name="country">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Address</label>
              <input type="text" class="form-control" name="address">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Education</label>
              <input type="text" class="form-control" name="education">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">CV (optional)</label>
              <input type="file" class="form-control" name="cv">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Availability</label>
              <select class="form-control" name="availability">
                <option value="part-time">Part-time</option>
                <option value="volunteer">Volunteer</option>
                <option value="full-time">Full-time</option>
              </select>
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Preferred Location</label>
              <input type="text" class="form-control" name="preferred_location">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Job Type Interested</label>
              <select class="form-control" name="job_type_interest">
                <option value="full-time">Full-time</option>
                <option value="part-time">Part-time</option>
                <option value="volunteer">Volunteer</option>
              </select>
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Skills</label>
              <input type="text" class="form-control" name="skills">
            </div>
            <div class="col-md-6 applicant-only">
              <label class="form-label fw-bold">Location of Interest</label>
              <input type="text" class="form-control" name="location_of_interest">
            </div>
            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">Establishment Date</label>
              <input type="date" class="form-control" name="establishment_date">
            </div>
            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">Location</label>
              <input type="text" class="form-control" name="location">
            </div>
            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">Achievements</label>
              <input type="text" class="form-control" name="achievements">
            </div>
            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">Sector</label>
              <select class="form-control" name="sector">
                <option value="IT">IT</option>
                <option value="NGO">NGO</option>
                <option value="Aviation">Aviation</option>
                <option value="Business">Business</option>
                <option value="Healthcare">Healthcare</option>
                <option value="Education">Education</option>
                <option value="Finance">Finance</option>
                <option value="Retail">Retail</option>
                <option value="Hospitality">Hospitality</option>
                <option value="Construction">Construction</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="col-md-6 org-only d-none">
              <label class="form-label fw-bold">Company Type</label>
              <select class="form-control" name="company_type">
                <option value="Small">Small</option>
                <option value="Medium">Medium</option>
                <option value="Large">Large</option>
              </select>
            </div>
            {% for q in security_questions %}
              <div class="col-md-6">
                <label class="form-label fw-bold">{{ q.question_text }}</label>
                <select class="form-control" name="question{{ forloop.counter }}_subquestion" {% if forloop.counter < 3 %}required{% endif %}>
                  <option value="{{ q.option1 }}">{{ q.option1 }}</option>
                  <option value="{{ q.option2 }}">{{ q.option2 }}</option>
                  <option value="{{ q.option3 }}">{{ q.option3 }}</option>
                </select>
                <input type="text" class="form-control mt-2" name="answer{{ forloop.counter }}" {% if forloop.counter < 3 %}required{% endif %} placeholder="Answer{% if forloop.counter == 3 %} (optional){% endif %}">
              </div>
            {% endfor %}
          </div>
          <div class="d-grid mt-4">
            <button type="submit" class="n btn-outline-light mt-3 w-100">Register</button>
          </div>
          <div class="d-grid mt-2">
            <button type="button" class="n btn-outline-light mt-3 w-100" id="signupBackBtn">Back</button>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>
// File: templates/utils/post_new_job.html
{% extends "base.html" %}
{% block content %}

  <h2>Post a New Job</h2>
  <form method="post" action="">
    {% csrf_token %}
    <p>
      <label>Job Title:<br>
        <input type="text" name="title" required>
      </label>
    </p>
    <p>
      <label>Job Type:<br>
        <select name="job_type">
          <option value="full-time">Full-time</option>
          <option value="part-time">Part-time</option>
          <option value="volunteer">Volunteer</option>
        </select>
      </label>
    </p>
    <p>
      <label>Location:<br>
        <input type="text" name="location" required>
      </label>
    </p>
    <p>
      <label>Application Deadline:<br>
        <input type="date" name="deadline">
      </label>
    </p>
    <button type="submit">Create Job</button>
    <a href="{% url 'org_dashboard' %}" class="cancel-link">Cancel</a>
  </form>

{% endblock %}

// File: users/__init__.py

// File: users/admin.py

// File: users/api/views.py

// File: users/forms.py

// File: users/managers.py

// File: users/migrations/0001_initial.py
# Generated by Django 5.2 on 2025-04-13 12:36

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SecurityQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('option1', models.CharField(max_length=255)),
                ('option2', models.CharField(max_length=255)),
                ('option3', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('age', models.PositiveIntegerField()),
                ('country', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=255)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('education', models.TextField()),
                ('cv', models.FileField(upload_to='cvs/')),
                ('preferred_location', models.CharField(max_length=100)),
                ('skills', models.TextField(blank=True)),
                ('location_of_interest', models.CharField(blank=True, max_length=100)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=8)),
                ('availability', models.CharField(choices=[('part-time', 'Part-time'), ('volunteer', 'Volunteer'), ('full-time', 'Full-time')], max_length=20)),
                ('job_type_interest', models.CharField(choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('volunteer', 'Volunteer')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, related_name='applicant_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='applicant_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('license_number', models.CharField(max_length=100, unique=True)),
                ('full_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('company_name', models.CharField(max_length=255)),
                ('establishment_date', models.DateField()),
                ('location', models.CharField(max_length=100)),
                ('achievements', models.TextField(blank=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('sector', models.CharField(choices=[('IT', 'IT'), ('NGO', 'NGO'), ('Aviation', 'Aviation'), ('Business', 'Business'), ('Healthcare', 'Healthcare'), ('Education', 'Education'), ('Finance', 'Finance'), ('Retail', 'Retail'), ('Hospitality', 'Hospitality'), ('Construction', 'Construction'), ('Other', 'Other')], max_length=50)),
                ('company_type', models.CharField(choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')], max_length=20)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=8)),
                ('groups', models.ManyToManyField(blank=True, related_name='organization_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='organization_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationSecurityAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('answer', models.CharField(max_length=255)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_answers', to='users.organization')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.securityquestion')),
            ],
        ),
        migrations.CreateModel(
            name='ApplicantSecurityAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('answer', models.CharField(max_length=255)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_answers', to='users.applicant')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.securityquestion')),
            ],
        ),
    ]

// File: users/migrations/0002_seed_security_questions.py
from django.db import migrations

def create_security_questions(apps, schema_editor):
    SecurityQuestion = apps.get_model('users', 'SecurityQuestion')

    SecurityQuestion.objects.create(
        question_text="Security Question 1",
        option1="Your first pet's name?",
        option2="Your favorite color?",
        option3="Your best friend's name?"
    )
    SecurityQuestion.objects.create(
        question_text="Security Question 2",
        option1="Your primary school?",
        option2="Your hometown?",
        option3="Your childhood nickname?"
    )
    SecurityQuestion.objects.create(
        question_text="Security Question 3",
        option1="Mother's maiden name?",
        option2="Favorite food?",
        option3="First job title?"
    )

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_security_questions),
    ]

// File: users/migrations/0003_rename_email_organization_organization_email_and_more.py
# Generated by Django 5.2 on 2025-04-13 15:03

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_seed_security_questions'),
    ]

    operations = [
        migrations.RenameField(
            model_name='organization',
            old_name='email',
            new_name='organization_email',
        ),
        migrations.RenameField(
            model_name='organization',
            old_name='full_name',
            new_name='organization_name',
        ),
        migrations.RenameField(
            model_name='organization',
            old_name='phone_number',
            new_name='organization_phone',
        ),
        migrations.RemoveField(
            model_name='organization',
            name='company_name',
        ),
    ]

// File: users/migrations/0004_alter_applicant_table_alter_organization_table.py
# Generated by Django 5.2 on 2025-04-14 01:57

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0003_rename_email_organization_organization_email_and_more'),
    ]

    operations = [
        migrations.AlterModelTable(
            name='applicant',
            table='users_applicant',
        ),
        migrations.AlterModelTable(
            name='organization',
            table='users_organization',
        ),
    ]

// File: users/migrations/0005_remove_applicant_account_status_and_more.py
# Generated by Django 5.2 on 2025-04-14 02:15

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0004_alter_applicant_table_alter_organization_table'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='applicant',
            name='account_status',
        ),
        migrations.RemoveField(
            model_name='organization',
            name='account_status',
        ),
    ]

// File: users/migrations/__init__.py

// File: users/models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.utils import timezone
from core.managers import ApplicantManager, OrganizationManager

class Applicant(AbstractBaseUser, PermissionsMixin):
    id_number = models.CharField(max_length=50, unique=True)
    full_name = models.CharField(max_length=150)
    email = models.EmailField(unique=True)
    phone_number = models.CharField(max_length=20)
    age = models.PositiveIntegerField()
    country = models.CharField(max_length=100)
    address = models.CharField(max_length=255)
    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    education = models.TextField()
    cv = models.FileField(upload_to='cvs/')
    preferred_location = models.CharField(max_length=100)
    skills = models.TextField(blank=True)
    location_of_interest = models.CharField(max_length=100, blank=True)
    availability = models.CharField(
        max_length=20,
        choices=[('part-time','Part-time'),('volunteer','Volunteer'),('full-time','Full-time')]
    )
    job_type_interest = models.CharField(
        max_length=20,
        choices=[('full-time','Full-time'),('part-time','Part-time'),('volunteer','Volunteer')]
    )
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='applicant_set',
        blank=True,
        verbose_name='groups'
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='applicant_permissions',
        blank=True,
        verbose_name='user permissions'
    )
    USERNAME_FIELD = 'id_number'
    REQUIRED_FIELDS = ['email','full_name']
    objects = ApplicantManager()

    def __str__(self):
        return f"Applicant: {self.full_name}"
    
    class Meta:
        db_table = 'users_applicant'

class Organization(AbstractBaseUser, PermissionsMixin):
    license_number = models.CharField(max_length=100, unique=True)
    organization_name = models.CharField(max_length=150)
    organization_email = models.EmailField(unique=True)
    organization_phone = models.CharField(max_length=20)
    establishment_date = models.DateField()
    location = models.CharField(max_length=100)
    achievements = models.TextField(blank=True)
    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    sector = models.CharField(
        max_length=50,
        choices=[
            ('IT','IT'),('NGO','NGO'),('Aviation','Aviation'),
            ('Business','Business'),('Healthcare','Healthcare'),
            ('Education','Education'),('Finance','Finance'),
            ('Retail','Retail'),('Hospitality','Hospitality'),
            ('Construction','Construction'),('Other','Other')
        ]
    )
    company_type = models.CharField(
        max_length=20,
        choices=[('Small','Small'),('Medium','Medium'),('Large','Large')]
    )
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='organization_set',
        blank=True,
        verbose_name='groups'
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='organization_permissions',
        blank=True,
        verbose_name='user permissions'
    )
    USERNAME_FIELD = 'license_number'
    REQUIRED_FIELDS = ['organization_email','organization_name']
    objects = OrganizationManager()

    def __str__(self):
        return f"Organization: {self.organization_name}"
    
    class Meta:
        db_table = 'users_organization'

class SecurityQuestion(models.Model):
    question_text = models.CharField(max_length=255)
    option1 = models.CharField(max_length=255)
    option2 = models.CharField(max_length=255)
    option3 = models.CharField(max_length=255)

    def __str__(self):
        return self.question_text

class ApplicantSecurityAnswer(models.Model):
    applicant = models.ForeignKey(
        'Applicant',
        on_delete=models.CASCADE,
        related_name='security_answers'
    )
    question = models.ForeignKey(SecurityQuestion, on_delete=models.CASCADE)
    question_text = models.CharField(max_length=255)
    answer = models.CharField(max_length=255)

class OrganizationSecurityAnswer(models.Model):
    organization = models.ForeignKey(
        'Organization',
        on_delete=models.CASCADE,
        related_name='security_answers'
    )
    question = models.ForeignKey(SecurityQuestion, on_delete=models.CASCADE)
    question_text = models.CharField(max_length=255)
    answer = models.CharField(max_length=255)

// File: users/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('reset-password/', views.reset_password, name='reset_password'),
    path('profile/', views.profile_view, name='profile'),
    path('chat/', views.chat_view, name='chat'),
]

// File: users/utils.py

// File: users/views.py
from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
import json
from .models import Applicant, Organization
from django.contrib.auth.decorators import login_required
from backend.models import JobPosting


@csrf_exempt
def reset_password(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        id_number = data.get('id','').strip()
        new_password = data.get('newPassword','').strip()
        user_type = data.get('user_type','').strip()
        answers = data.get('answers', [])
        if user_type == 'applicant':
            user = Applicant.objects.filter(id_number=id_number).first()
            if not user:
                return JsonResponse({'success': False, 'message': 'User not found'})
            correct = 0
            for ans in answers:
                if user.security_answers.filter(
                    question_text=ans['question'],
                    answer__iexact=ans['answer']
                ).exists():
                    correct += 1
            if correct >= 2:
                user.set_password(new_password)
                user.save()
                return JsonResponse({'success': True})
            return JsonResponse({'success': False, 'message': 'Incorrect answers'})
        elif user_type == 'organization':
            user = Organization.objects.filter(license_number=id_number).first()
            if not user:
                return JsonResponse({'success': False, 'message': 'User not found'})
            correct = 0
            for ans in answers:
                if user.security_answers.filter(
                    question_text=ans['question'],
                    answer__iexact=ans['answer']
                ).exists():
                    correct += 1
            if correct >= 2:
                user.set_password(new_password)
                user.save()
                return JsonResponse({'success': True})
            return JsonResponse({'success': False, 'message': 'Incorrect answers'})
        return JsonResponse({'success': False, 'message': 'Invalid user type'})
    return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)


@login_required
def profile_view(request):
    return render(request, 'profile.html')

@login_required
def chat_view(request):
    return render(request, 'chat.html')
